<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java8 List转Map Key重复问题</title>
      <link href="2021/11/09/toMap-bug/"/>
      <url>2021/11/09/toMap-bug/</url>
      
        <content type="html"><![CDATA[<h1>起因</h1><h2 id="问题重现">问题重现</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"小名"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"小名"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> studentMap <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行上面的代码会报一个错误：<img src="https://img.kandx.icu/img/20211109214857.png" alt="Key重复"></p><h2 id="原因">原因</h2><p>百度了一下这个bug是因为键<code>Key</code>重复了</p><h1>解决</h1><p>当Key重复的时候需要指定一下使用第一个值还是第二个值，如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> studentMap <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>name1<span class="token punctuation">,</span> name2<span class="token punctuation">)</span> <span class="token operator">-></span> name2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img.kandx.icu/img/20211109215323.png" alt="获取值"></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给女朋友写的天气推送</title>
      <link href="2021/11/07/push-msg/"/>
      <url>2021/11/07/push-msg/</url>
      
        <content type="html"><![CDATA[<h1>准备</h1><h2 id="Server酱账号">Server酱账号</h2><p>首先打开server酱的官网<a href="https://sct.ftqq.com/">server酱</a><img src="https://img.kandx.icu/img/20211107133448.png" alt="server酱官网">可以先不购买第一次注册的话有几天的会员试用，可以先用着如果觉得可以就购买。</p><p>账号注册完毕后会有一个<code>sendKey</code>这个key是用来发送消息url参数<img src="https://img.kandx.icu/img/20211107133854.png" alt="sendKey"></p><h2 id="企业微信">企业微信</h2><p>如果你大致浏览了一下server酱的官网后就会知道它支持很多的发送方式：</p><p><img src="https://img.kandx.icu/img/20211107135644.png" alt="消息通道选择 "></p><p>这里推荐使用企业微信比较方便配置，官网也有教程可以按照官网的方法来。</p><h1>代码</h1><h2 id="用到的依赖">用到的依赖</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.7.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.78<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dtflys.forest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>forest-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><code>hutool</code>:主要用来计算时间的</p><p><code>forest</code>:(核心)用来调用第三方接口如server酱的推送，天气api等。这里放一下forest的官方文档吧<a href="http://forest.dtflyx.com/docs/">forest文档</a></p><p>另外天气api的话，这里还是推荐<a href="https://www.seniverse.com/">知心</a>。虽然收费但是数据相对来说比较准确，我个人比较穷用的是个免费的<a href="https://tianqiapi.com">api</a></p><h2 id="推送模板">推送模板</h2><h3 id="天气模板">天气模板</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token string">"今天是 %s\n"</span> <span class="token operator">+</span><span class="token string">"是咱俩在一起的第 %s 天\n"</span> <span class="token operator">+</span><span class="token string">"距离宝宝的生日还有 %s 天\n"</span> <span class="token operator">+</span><span class="token string">"距离 %s 周年还有 %s 天\n"</span> <span class="token operator">+</span><span class="token string">"距离上交工资还有 %s 天\n"</span> <span class="token operator">+</span><span class="token string">"%s 今日天气: %s \n"</span> <span class="token operator">+</span><span class="token string">"白天天气: %s\n"</span> <span class="token operator">+</span><span class="token string">"晚上天气: %s\n"</span> <span class="token operator">+</span><span class="token string">"最低温度: %s\n"</span> <span class="token operator">+</span><span class="token string">"最高温度: %s\n"</span> <span class="token operator">+</span><span class="token string">"紫外线指数: %s\n"</span> <span class="token operator">+</span><span class="token string">"穿衣指数: %s\n"</span> <span class="token operator">+</span><span class="token string">"空气污染指数: %s"</span><span class="token punctuation">;</span></code></pre><p>效果：<img src="https://img.kandx.icu/img/20211107142134.png" alt="天气推送效果图"></p><h3 id="工资单模板">工资单模板</h3><pre class="language-java" data-language="java"><code class="language-java">宝贝，今天是 <span class="token operator">%</span>s 预计晚上<span class="token number">9</span>点上交工资，请注意查收呦<span class="token operator">~</span></code></pre><p>效果：<img src="https://img.kandx.icu/img/20211107142303.png" alt="工资单推送效果图"></p><h1>结尾</h1><p>这个推送效果没有微信的模板消息好看，之前第一版用的是微信模板，但是是个测试号，提醒的效果不好所以最后还是换回了server酱。另外代码已经开源到了github,有需要的小伙伴可以自行clone，有哪里不懂得可以私信问我，也可以直接底部留言。<a href="https://github.com/daochen23/push-wechat">源码地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis配置文件</title>
      <link href="2021/08/09/redis-config/"/>
      <url>2021/08/09/redis-config/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis的单位">Redis的单位</h2><p><img src="https://img.kandx.icu/img/20210809140154.png" alt="Redis单位"></p><p>Redis配置文件开头配置了大小单位，只支持<code>bytes</code>不支持<code>bit</code>,大小写不敏感</p><h2 id="Includes">Includes</h2><p><img src="https://img.kandx.icu/img/20210809140452.png" alt="INCLUDES"></p><p>配置文件可以引用其它的配置文件</p><h2 id="MODULES">MODULES</h2><p><img src="https://img.kandx.icu/img/20210809140952.png" alt="modules"></p><p>模块扩展功能，可以自定义一些新的模块（如新的数据类型）</p><h2 id="NETWORK（重点配置）">NETWORK（重点配置）</h2><h3 id="bind">bind</h3><p><img src="https://img.kandx.icu/img/20210809141814.png" alt="bind"></p><p>默认情况下<code>bind = 127.0.0.1</code>只能接受本机的访问请求，不写的情况下（将这句话注释掉），无限制接受任何IP地址的访问。生产环境肯定要写你应用服务器的地址；服务器是要远程访问 的，所以需要将其注释掉。</p><h3 id="protected-mode">protected-mode</h3><p><img src="https://img.kandx.icu/img/20210809142348.png" alt="protected-mode"></p><p>开启保护模式，需要配置bind ip或者设置验证密码；</p><p>关闭保护模式，此时任何IP都可以访问</p><h3 id="port">port</h3><p><img src="https://img.kandx.icu/img/20210809142711.png" alt="port"></p><p>端口号的设置</p><h3 id="tcp-backlog">tcp-backlog</h3><p><img src="https://img.kandx.icu/img/20210809143310.png" alt="tcp-backlog"></p><p>backlog其实是一个连接队列，backlog队列总和 = 未完成三次握手队列 + 已经完成三次握手队列。在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。</p><p><strong>注意</strong>：Linux内核会将这个值减小到/proc/sys/neet/ccore/somaxconn的值（128），所以需要确认增大/proc/sys/net/core/somaxconn和/proc/sys/net/ipv4/tcp_max_syn/backlog(128)两个值来达到想要的结果</p><h3 id="timeout">timeout</h3><p><img src="https://img.kandx.icu/img/20210809143800.png" alt="timeout"></p><p>当连接到redis后，多少时间未操作就会超时，需要重新连接。默认为<code>0</code>表示永不超时</p><h3 id="tcp-keeepalive">tcp-keeepalive</h3><p><img src="https://img.kandx.icu/img/20210809144536.png" alt="tcp-keepalive"></p><p>每隔300s检测一下心跳，判断是否连接，设置为<code>0</code>则表示不再检测</p><h2 id="GENERAL">GENERAL</h2><h3 id="daemonize">daemonize</h3><p><img src="https://img.kandx.icu/img/20210809145202.png" alt="daemonize"></p><p>redis是否为后台启动，默认为no</p><h3 id="pidfile">pidfile</h3><p><img src="https://img.kandx.icu/img/20210809145500.png" alt="pidfile"></p><p>开启redis服务会产生一个进程id，这个id会存储在指定的文件内</p><h3 id="loglevel">loglevel</h3><p><img src="https://img.kandx.icu/img/20210809145744.png" alt="loglevel"></p><p>当前的日志级别：<strong>debug</strong>(在开发或者测试的时候可以看到更加详细的信息)、<strong>verbos</strong>(这个级别类似于Java中的info)、<strong>notice</strong>(生产中用的日志级别)、<strong>warning</strong>(只显示一些有用的或者重要的日志信息)</p><h3 id="logfile">logfile</h3><p><img src="https://img.kandx.icu/img/20210809150447.png" alt="logfile"></p><p>日志文件保存的地方</p><h3 id="databases">databases</h3><p><img src="https://img.kandx.icu/img/20210809150607.png" alt="databases"></p><p>redis数据库的数量，默认为<strong>16个</strong></p><h2 id="SNAPSHOTTING">SNAPSHOTTING</h2><h3 id="save">save</h3><p><img src="https://img.kandx.icu/img/20210809150848.png" alt="save"></p><ul><li><strong>save 3600 1</strong>：当在一个小时内操作key至少一次，就会触发RDB持久化操作</li><li><strong>save 300 100</strong>：当在五分钟内操作key至少100次，就会触发RDB持久化操作</li><li><strong>save 60 10000</strong>：当在1分钟内操作key至少10000次，就会触发RDB持久化操作</li></ul><h3 id="stop-writes-on-bgsave-error">stop-writes-on-bgsave-error</h3><p><img src="https://img.kandx.icu/img/20210809171715.png" alt="stop-writes-on-bgsave-error"></p><p>默认值为yes,当启用了RDB并且最后一次保存数据失败时，Redis是否停止写入数据</p><h3 id="rdbcompression">rdbcompression</h3><p><img src="https://img.kandx.icu/img/20210809172015.png" alt="rdbcompression"></p><p>默认值为<code>yes</code>，用于表示持久化时，写入磁盘的快照文件是否需要压缩处理</p><h3 id="rdbchecksum">rdbchecksum</h3><p><img src="https://img.kandx.icu/img/20210809172313.png" alt="rdbchecksum"></p><p>默认值是<code>yes</code>，在存储快照后，我们还可以让redis进行数据校验，但是这样做会增加更多的性能消耗，如果希望获得最大的性能提升，可以关闭校验功能</p><h3 id="dbfilename">dbfilename</h3><p><img src="https://img.kandx.icu/img/20210809174502.png" alt="dbfilename"></p><p>设置快照的文件名，默认是<code>dump.rdb</code></p><h3 id="dir">dir</h3><p><img src="https://img.kandx.icu/img/20210809174916.png" alt="dir"></p><p>设置快照文件的存储位置</p><h2 id="REPLICATION">REPLICATION</h2><h3 id="replica-serve-stale-data">replica-serve-stale-data</h3><p><img src="https://img.kandx.icu/img/20210809175321.png" alt="replica-serve-stale-data"></p><p>默认值为<code>yes</code>，当从节点与主节点断开连接，或者正在同步数据时，从节点可能有两种表现：</p><ul><li>如果为<code>yes</code>，从节点可以继续响应客户端要求，但返回的数据可能时过时的。</li><li>如果为<code>no</code>，从节点在以上情况不再相应客户端请求，此时会返回<code>SYNC with master in progress</code>的错误</li></ul><h3 id="replica-read-only">replica-read-only</h3><p><img src="https://img.kandx.icu/img/20210809175637.png" alt="replica-read-only"></p><p>配置从节点是否只读，默认为<code>yes</code></p><h3 id="repl-diskless-sync">repl-diskless-sync</h3><p><img src="https://img.kandx.icu/img/20210809175738.png" alt="repl-diskless-sync"></p><p>主从数据复制是否使用无硬盘功能，默认为<code>no</code></p><h2 id="SECURITY">SECURITY</h2><h3 id="requirepass">requirepass</h3><p><img src="https://img.kandx.icu/img/20210809180302.png" alt="requirepass"></p><p>设置redis连接时的密码</p><h2 id="CLIENTS">CLIENTS</h2><h3 id="maxclients">maxclients</h3><p><img src="https://img.kandx.icu/img/20210809180429.png" alt="maxclients"></p><p>设置redis客户端的最大并发连接数，默认无限制。如果设置为<code>0</code>，表示不做限制，当客户端连接数达到限制时，Redis会关闭新的连接。</p><h2 id="MEMORY-MANAGEMENT">MEMORY MANAGEMENT</h2><h3 id="maxmemory">maxmemory</h3><p><img src="https://img.kandx.icu/img/20210809180841.png" alt="maxmemory"></p><p>设置Redis最大缓存，如果设置为<code>0</code>，表示不做限制。</p><h3 id="maxmemory-policy">maxmemory-policy</h3><p><img src="https://img.kandx.icu/img/20210809181003.png" alt="maxmemory-policy"></p><p>redis的内存清除策略：</p><ul><li><strong>volatile-lru</strong>：从已经设置过期时间的数据集中挑选最少使用的数据淘汰</li><li><strong>volatile-ttl</strong>：从已经设置过期时间的数据集中挑选将要过期的数据淘汰</li><li><strong>volatile-random</strong>：从已经设置过期时间的数据集中任意数据淘汰</li><li><strong>allkeys-lru</strong>：在键空间中，移除最近最少使用的key</li><li><strong>allkeys-random</strong>：从数据集中任意选择书淘汰</li><li><strong>noeviction</strong>：禁止驱逐数据，当内存不足时，新写入的数据会报错</li><li><strong>volatile-lfu</strong>：从已经设置过期时间的数据中挑选最不常用的数据淘汰</li><li><strong>allkeys-lfu</strong>: 当内存不足以容纳新的数据时，在键空间中，移除最不常用的key</li></ul><h3 id="replica-ignore-maxmemory">replica-ignore-maxmemory</h3><p><img src="https://img.kandx.icu/img/20210809181928.png" alt="replica-ignore-maxmemory"></p><p>是否忽略从节点的内从限制，默认为<code>yes</code></p><h2 id="APPEND-ONLY-MODE">APPEND ONLY MODE</h2><h3 id="appendonly">appendonly</h3><p><img src="https://img.kandx.icu/img/20210809182312.png" alt="appendonly"></p><p>默认情况下redis使用RDB方式持久化，这种方式在许多场景中已经足够用了，但是这种方式可能会导致可能有几分钟的数据丢失，而AOF是另一种持久化方式，可以提供更好的持久化特性。Redis会把写命令都写入<code>appendonly.aof</code>文件，如果启动AOF，每次启动时，Redis都会先把这个文件的数据读入到内从里，而忽略RDB文件。</p><h3 id="appendfilename">appendfilename</h3><p><img src="https://img.kandx.icu/img/20210809183247.png" alt="appendfilename"></p><p>AOF文件名称，默认为<code>appendonly.aof</code></p><h3 id="appendfsync">appendfsync</h3><p><img src="https://img.kandx.icu/img/20210809183351.png" alt="appendfsync"></p><p>aof持久化策略配置：</p><ul><li><strong>no</strong>：让操作系统决定何时进行同步</li><li><strong>everysec</strong>：表示每秒执行一次数据同步，可能会丢失1s数据（默认）</li><li><strong>always</strong>：表示每执行一次写的操作都会写入到文件中，大大降低了性能</li></ul><h3 id="no-appendfsync-on-rewrite">no-appendfsync-on-rewrite</h3><p><img src="https://img.kandx.icu/img/20210809184110.png" alt="no-appendfsync-on-rewrite"></p><p>在AOF重写或者写入RDB文件的时候，会执行大量IO，此时对于<code>everysec</code>和<code>always</code>的AOF模式来说，执行fsync会造成阻塞过长时间，<code>no-appendfsync-on-rewrite</code>字段设置为<code>no</code>。如果对延迟要求很高的应用，这个字段可以设置为<code>yes</code>，这样对持久化特性来说是更加安全的选择。设置为<code>yes</code>表示重写期间对新写入的操作不fsync,暂时存在内存中，等重写完后再写入，默认为<code>no</code>，建议为<code>yes</code>。</p><h3 id="auto-aof-rewrite-percentage-和-auto-aof-rewrite-min-size">auto-aof-rewrite-percentage 和 auto-aof-rewrite-min-size</h3><p><code>auto-aof-rewrite-percentage</code>：默认值为<code>100</code>，aof自动重写配置，当目前aof文件大小超过上次重写的AOF文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候，Redis能够调用重写命令（bgrewrite）对aof进行重写，这样做的目的就是压缩aof文件，当前AOF文件大小是上次日志重写得到的AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</p><p><code>auto-aof-rewrite-min-size</code>：64mb,设置允许重写的最小aof文件大小，避免了达到约定百分比但是尺寸仍然很小的情况还是要重写。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis中5大常用类型及命令</title>
      <link href="2021/08/05/redis-use/"/>
      <url>2021/08/05/redis-use/</url>
      
        <content type="html"><![CDATA[<h2 id="key键操作">key键操作</h2><ul><li><p>查看当前库中所有的key</p><pre class="language-none"><code class="language-none">keys *</code></pre></li><li><p>判断某个key是否存在</p><pre class="language-none"><code class="language-none">exists key</code></pre></li><li><p>查看某个key的类型</p><pre class="language-none"><code class="language-none">type key</code></pre></li><li><p>删除某个key</p><pre class="language-none"><code class="language-none">del key</code></pre></li><li><p>异步非阻塞删除</p><pre class="language-none"><code class="language-none">unlink key</code></pre><p>和<code>dle key</code>区别是，<code>unlink</code>只是将key从<strong>keyspace</strong>元数据中删除，真正的删除是在后续异步操作。</p></li><li><p>设置key的过期时间</p><pre class="language-none"><code class="language-none">expire key 10</code></pre></li><li><p>查看key还剩多少时间过期</p><pre class="language-none"><code class="language-none">ttl key</code></pre><p>-1 表示永不过期；-2 表示已经过期</p></li><li><p>切换数据库</p><pre class="language-none"><code class="language-none">select 1</code></pre><p>redis一共有16个数据库，0-15默认使用第一个数据库</p></li><li><p>查看当前数据库的key数量</p><pre class="language-none"><code class="language-none">dbsize</code></pre></li><li><p>清空当前数据库</p><pre class="language-none"><code class="language-none">flushdb</code></pre></li><li><p>清空所有的数据库</p><pre class="language-none"><code class="language-none">flusha</code></pre></li></ul><h2 id="string（Redis字符串）">string（Redis字符串）</h2><p>string类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化对象。一个string的value值最大为<strong>512M</strong></p><h3 id="常用命令">常用命令</h3><ul><li><p>设置一个string类型key</p><pre class="language-none"><code class="language-none">set &lt;key&gt; &lt;value&gt;</code></pre><p>如果设置的key已经存在那么新的value值会覆盖原来的value值，如：<code>set k1 v1</code>,这时的k1的值为v1,<code>set k1 v2</code>,那么这个时候原本的v1会被v2覆盖</p></li><li><p>获取key的值</p><pre class="language-none"><code class="language-none">get &lt;key&gt;</code></pre></li><li><p>在value后面追加新的数据</p><pre class="language-none"><code class="language-none">append &lt;key&gt; &lt;value&gt;</code></pre></li><li><p>查看value值的长度</p><pre class="language-none"><code class="language-none">strlen &lt;key&gt;</code></pre></li><li><p>设置一个string类型的key</p><pre class="language-none"><code class="language-none">setnx &lt;key&gt; &lt;value&gt;</code></pre><p>和<code>set</code>不同的是<strong>只有当key不存在时，才可以设定，常用来作为分布式锁</strong></p></li><li><p>自增</p><pre class="language-none"><code class="language-none">incr &lt;key&gt;</code></pre><p>当key存储的值为数字时，自增1.如果是一个不存在的key,则初始化的值为1</p></li><li><p>自减</p><pre class="language-none"><code class="language-none">decr &lt;key&gt;</code></pre><p>效果与<code>incr</code>相反</p></li><li><p>自定义自增数量</p><pre class="language-none"><code class="language-none">incrby &lt;key&gt; &lt;步长&gt;</code></pre><p>步长可以为负数，如果为负数效果就是自减</p></li><li><p>自定义自减数量</p><pre class="language-none"><code class="language-none">decr &lt;key&gt; &lt;步长&gt;</code></pre><p>步长可以为负数，如果为负数效果就是自增</p></li><li><p>批量设置string类型的key</p><pre class="language-none"><code class="language-none">mset &lt;key1&gt; &lt;value1&gt; &lt;key2&gt; &lt;value2&gt;</code></pre></li><li><p>批量获取string类型的key</p><pre class="language-none"><code class="language-none">mget &lt;key1&gt; &lt;key2&gt;</code></pre></li><li><p>批量设置不存在的string类型的key</p><pre class="language-none"><code class="language-none">msetnx &lt;key1&gt; &lt;value1&gt; &lt;key2&gt; &lt;value2&gt;</code></pre><p>以上的批量设置是一个原子性操作，有一个失败都失败</p></li><li><p>获取某个范围的value值</p><pre class="language-none"><code class="language-none">getrange &lt;key&gt; &lt;开始下标&gt; &lt;结束下标&gt;</code></pre></li><li><p>覆盖某个范围的value值</p><pre class="language-none"><code class="language-none">setrange &lt;key&gt; &lt;下标&gt; &lt;value&gt;</code></pre></li><li><p>设置一个包含过期时间的key</p><pre class="language-none"><code class="language-none">setex &lt;key&gt; &lt;过期时间&gt; &lt;value&gt;</code></pre></li><li><p>新值换旧值</p><pre class="language-none"><code class="language-none">getset &lt;key&gt; &lt;value&gt;</code></pre><p>如果k1的值为100，那么如果使用上面的命令100会被新的value值覆盖掉</p></li></ul><h2 id="list-Redis列表">list(Redis列表)</h2><p>Redis列表是简单的字符串列表，按照顺序插入，可以添加一个元素到列表头部（左边）或者尾部（右边）。它的底层实际上一个<strong>双向链表</strong>，对两端的操作性能很高，通过索引下标操作中间节点性能较差。</p><h3 id="常用命令-2">常用命令</h3><ul><li><p>创建一个列表</p><pre class="language-none"><code class="language-none">lpush&#x2F;rpush &lt;key&gt; &lt;value1&gt; &lt;value2&gt; &lt;value3&gt;</code></pre></li><li><p>从列表中取出一个值</p><pre class="language-none"><code class="language-none">lpop&#x2F;rpop &lt;key&gt;</code></pre><p>当列表中一个值都没有的时候，这个列表就不存在了</p></li><li><p>从列表右边取出一个值放到另外一个列表左边</p><pre class="language-none"><code class="language-none">rpoplpush &lt;key1&gt; &lt;key2&gt;</code></pre></li><li><p>从左到右获取列表中的值</p><pre class="language-none"><code class="language-none">lrange &lt;key&gt; &lt;开始下标&gt; &lt;结束下标&gt;</code></pre></li><li><p>从左到右获取索引下标的元素</p><pre class="language-none"><code class="language-none">lindex &lt;key&gt; &lt;下标&gt;</code></pre></li><li><p>获取列表的长度</p><pre class="language-none"><code class="language-none">llen &lt;key&gt;</code></pre></li><li><p>在指定元素前面或者后面添加元素</p><pre class="language-none"><code class="language-none">linsert &lt;key&gt; &lt;after&gt;&#x2F;&lt;before&gt; &lt;指定元素&gt; &lt;添加元素&gt;</code></pre></li><li><p>从左边删除n个相同的元素</p><pre class="language-none"><code class="language-none">lrem &lt;key&gt; &lt;n&gt; &lt;value&gt;</code></pre></li><li><p>替换指定位置的元素</p><pre class="language-none"><code class="language-none">lset &lt;key&gt; &lt;index&gt; &lt;value&gt;</code></pre></li></ul><h2 id="set-Redis集合">set(Redis集合)</h2><p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择</p><ul><li><p>添加一个元素到集合中</p><pre class="language-none"><code class="language-none">sadd &lt;key&gt; &lt;value1&gt; &lt;value2&gt; </code></pre><p>如果添加的元素已经在集合中存在，那么这个元素就不会被重复添加</p></li><li><p>查看集合中的所有元素</p><pre class="language-none"><code class="language-none">smembers &lt;key&gt;</code></pre></li><li><p>判断集合中是否包含某个元素</p><pre class="language-none"><code class="language-none">sismember &lt;key&gt; &lt;value&gt;</code></pre><p>如果存在返回<strong>1</strong>，否则返回<strong>0</strong></p></li><li><p>查看集合中元素的个数</p><pre class="language-none"><code class="language-none">scard &lt;key&gt;</code></pre></li><li><p>删除集合中的某些元素</p><pre class="language-none"><code class="language-none">srem &lt;key&gt; &lt;value1&gt; &lt;value2&gt;</code></pre></li><li><p>随机从集合中拿出一个值</p><pre class="language-none"><code class="language-none">spop &lt;key&gt;</code></pre><p>拿出来的值会从集合中删除</p></li><li><p>随机从集合中取出N个值</p><pre class="language-none"><code class="language-none">srandmember &lt;key&gt; &lt;count&gt;</code></pre><p>出去来的值不会从集合中删除</p></li><li><p>把集合中的值移动到另一个集合中</p><pre class="language-none"><code class="language-none">smove &lt;原集合&gt; &lt;目标集合&gt; &lt;需要移动的数据&gt;</code></pre></li><li><p>两个集合的交集</p><pre class="language-none"><code class="language-none">sinter &lt;key1&gt; &lt;key2&gt;</code></pre></li><li><p>两个集合的并集</p><pre class="language-none"><code class="language-none">sunion &lt;key1&gt; &lt;key2&gt;</code></pre></li><li><p>返回两个集合的差集</p><pre class="language-none"><code class="language-none">sdiff &lt;key1&gt; &lt;key2&gt;</code></pre><p>返回的结果是在<code>key1</code>存在，<code>key2</code>不存在的数据</p></li></ul><h2 id="hash-Redis哈希">hash(Redis哈希)</h2><p>Redis hash是一个键值对集合。是一个string类型的field和value的映射表，hash特别适合用来存储对象。</p><h3 id="常用命令-3">常用命令</h3><ul><li><p>设置一个hash类型的key</p><pre class="language-none"><code class="language-none">hset &lt;key&gt; &lt;field1&gt; &lt;value1&gt; &lt;field2&gt; &lt;value2&gt;</code></pre></li><li><p>获取key中某个字段的值</p><pre class="language-none"><code class="language-none">hget &lt;key&gt; &lt;field&gt;</code></pre></li><li><p>批量设置hash的值</p><pre class="language-none"><code class="language-none">hmset &lt;key&gt; &lt;field1&gt; &lt;value1&gt; &lt;field2&gt; &lt;value2&gt;</code></pre></li><li><p>查看key中是否包含某个field</p><pre class="language-none"><code class="language-none">hexists &lt;key&gt; &lt;field&gt;</code></pre></li><li><p>获取key中所有的field</p><pre class="language-none"><code class="language-none">hkeys &lt;key&gt;</code></pre></li><li><p>获取key中所有field对应的值</p><pre class="language-none"><code class="language-none">hvals &lt;key&gt;</code></pre></li><li><p>为field所对应的值自增或者自减</p><pre class="language-none"><code class="language-none">hincrby &lt;key&gt; &lt;field&gt; &lt;自增多少或者自减多少&gt;</code></pre></li><li><p>为key中的field设置值</p><pre class="language-none"><code class="language-none">hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt;</code></pre><p>需要保证在该key中这个field不能存在，否则无法设置成功</p></li></ul><h2 id="score-set-Redis有序集合">score set(Redis有序集合)</h2><p>和set不同之处：有序集合的每个成员都关联了一个<strong>评分（权重score）</strong>，这个评分（score）被用来按照从低到高的方式排列。集合中的成员是唯一的，但是评分是可以重复的</p><ul><li><p>创建一个score set集合</p><pre class="language-none"><code class="language-none">zadd &lt;key&gt; &lt;score1&gt; &lt;value1&gt; &lt;score2&gt; &lt;value2&gt;</code></pre><p>元素可以是一个也可以是多个</p></li><li><p>返回集合内容</p><pre class="language-none"><code class="language-none">zrange &lt;key&gt; &lt;开始下标&gt; &lt;结束下标&gt; [withscores]</code></pre><p>返回指定索引范围内的内容，如果加上了<code>withscore</code>那么value对应的score也会返回(默认按照从小到大的顺序)</p></li><li><p>返回score范围内的元素</p><pre class="language-none"><code class="language-none">zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; [withscores]</code></pre></li><li><p>返回score范围内的元素</p><pre class="language-none"><code class="language-none">zrevrangebyscore &lt;key&gt; &lt;max&gt; &lt;min&gt; [withscores]</code></pre><p>与<code>zrangebyscore</code>效果相反</p></li><li><p>修改（自增/自减）指定元素的score</p><pre class="language-none"><code class="language-none">zincrby &lt;key&gt; &lt;自增&#x2F;自减数量&gt; &lt;value&gt;</code></pre></li><li><p>删除集合指定元素</p><pre class="language-none"><code class="language-none">zrem &lt;key&gt; &lt;value&gt;</code></pre></li><li><p>统计集合中score区间内元素个数</p><pre class="language-none"><code class="language-none">zcount &lt;key&gt; &lt;min&gt; &lt;max&gt;</code></pre></li><li><p>返回元素在集合中的排名</p><pre class="language-none"><code class="language-none">zrank &lt;key&gt; &lt;value&gt;</code></pre><p>返回的排名是从<code>0</code>开始的（从小到大排列）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装redis</title>
      <link href="2021/08/05/redis-install/"/>
      <url>2021/08/05/redis-install/</url>
      
        <content type="html"><![CDATA[<h1>下载Redis安装包</h1><ul><li><a href="https://redis.io/download">官方网址下载</a></li><li><a href="https://wws.lanzoui.com/i7O0Rs9mili">蓝奏云Redis6.2.5</a>（密码：4iot）</li></ul><h1>开始安装</h1><h2 id="上传到服务器">上传到服务器</h2><p>将下载好的文件上传的到服务器</p><h2 id="安装gcc依赖">安装gcc依赖</h2><pre class="language-none"><code class="language-none">yum install -y gcc</code></pre><p>此过程需要联网，安装完成后使用如下命令检测是否安装成功</p><pre class="language-none"><code class="language-none">gcc --version</code></pre><p><img src="https://img.kandx.icu/img/20210805163135.png" alt="检测gcc是否安装成功"></p><h2 id="解压Redis安装包">解压Redis安装包</h2><pre class="language-none"><code class="language-none">tar -zxvf redis-6.2.5.tar.gz</code></pre><h2 id="编译解压文件">编译解压文件</h2><p>进入到解压后的文件执行编译</p><pre class="language-none"><code class="language-none">make</code></pre><h2 id="安装编译后的文件">安装编译后的文件</h2><p>还是在解压文件夹下执行安装命令</p><pre class="language-none"><code class="language-none">make install</code></pre><h2 id="检测是否安装成功">检测是否安装成功</h2><p>一般默认安装后会在<code>/usr/local/bin</code>目录下有如下东西</p><p><img src="https://img.kandx.icu/img/20210805163738.png" alt="image-20210805163738772"></p><ul><li><strong>redis-benchmark</strong>：性能测试工具，可以在自己的电脑运行看看自己的电脑性能如何</li><li><strong>redis-check-aof</strong>：修复有问题的aof文件</li><li><strong>redis-check-rdb</strong>：修复有问题的rdb文件</li><li><strong>redis-sentinel</strong>：redis集群使用</li><li><strong>redis-server</strong>：redis服务器启动命令</li><li><strong>redis-cli</strong>：客户端</li></ul><h2 id="启动Redis服务">启动Redis服务</h2><h3 id="方式一">方式一</h3><p>进入到<code>/usr/local/bin</code>目录下</p><pre class="language-none"><code class="language-none">redis-server</code></pre><p><img src="https://img.kandx.icu/img/20210805164438.png" alt="Redis服务启动"></p><p>从上面这个图片中我们可以看到几个有用的信息：</p><ul><li>启动方式是单机的<code>Running in standalone mode</code></li><li>端口号为<code>6379</code></li></ul><h3 id="方式二">方式二</h3><h4 id="复制Redis的配置文件到其他目录下">复制Redis的配置文件到其他目录下</h4><p><img src="https://img.kandx.icu/img/20210805164954.png" alt="redis的配置文件"></p><pre class="language-none"><code class="language-none">cp redis.conf &#x2F;etc&#x2F;redis.conf</code></pre><h4 id="修改配置文件">修改配置文件</h4><p>将<code>daemonize no</code>改为<code>daemonize yes</code></p><p><img src="https://img.kandx.icu/img/20210805165257.png" alt="修改配置文件"></p><h4 id="后台启动">后台启动</h4><p>先进入到<code>/usr/local/bin</code></p><pre class="language-none"><code class="language-none">redis-server &#x2F;etc&#x2F;redis.conf</code></pre><p>查看是否启动成功</p><pre class="language-none"><code class="language-none">ps -ef | grep redis</code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试骚套路之JVM</title>
      <link href="2021/07/24/java-jvm/"/>
      <url>2021/07/24/java-jvm/</url>
      
        <content type="html"><![CDATA[<h2 id="Java面试骚套路之JVM">Java面试骚套路之JVM</h2>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试骚套路之Redis</title>
      <link href="2021/07/23/java-redis/"/>
      <url>2021/07/23/java-redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Java面试骚套路之Redis">Java面试骚套路之Redis</h2><h3 id="什么是Redis">什么是Redis</h3><p>简单来说Redis<strong>就是一个使用C语言开发的数据库</strong>,不过与传统数据库不同的是Redis的<strong>数据是存在内存中的</strong>,也就是它是内存数据库,所以读写速度非常快,因此Redis被广泛应用于缓存方向.</p><p>另外,<strong>Redis除了做缓存之外,Redis也经常用来做分布式锁,甚至是消息队列</strong>.</p><p>Redis提供了多种数据类型来支持不同的业务场景.<strong>Redis还支持事务、持久化、Lua脚本、多种集群方案</strong>.</p><h3 id="Redis有哪些数据类型">Redis有哪些数据类型</h3><h4 id="string">string</h4><p>string数据结构是简单的key-value类型.</p><p>基本操作:</p><pre class="language-redis" data-language="redis"><code class="language-redis"># 设置key - value&gt; set key valueOK# 获取键&quot;key&quot;对应的值&gt; get key&quot;value&quot;# 判断某个key是否存在&gt; exists key(integer) 1# 查询某个key的值的长度&gt; strlen key(integer) 5# 删除某个key&gt; del key(integer) 1&gt; get keyt(nil)</code></pre><p>应用场景: 一般用于需要计数的场景,比如用户的访问次数、热点文章的点赞转发数量等等</p><pre class="language-redis" data-language="redis"><code class="language-redis"># 计数器:# 设置整数数值的value&gt; set number 1OK# 让value自增1&gt; incr number(integer) 2&gt; get number&quot;2&quot;# 让value自减1&gt; decr number(integer) 1&gt; get number&quot;1&quot;</code></pre><h4 id="list">list</h4><p>list是<strong>链表</strong>(Redis自己实现的双向链表),插入和删除元素方便高效,但是随机访问困难</p><p>应用场景: 发布与订阅或者说是消息队列</p><pre class="language-redis" data-language="redis"><code class="language-redis"># 向list的头部右边添加元素&gt; rpush myList value1(integer) 1# 向list的头部最右边添加多个元素&gt; rpush myList value2 value3(integer) 3# 将list的尾部(最左边)元素取出&gt; lpop myList&quot;value1&quot;# 查看对应下标的list列表, 0为start, 1为end&gt; lrange myList 0 11) &quot;value2&quot;2) &quot;value3&quot;# 查看列表中所有的元素, -1表示倒数第一&gt; lrange myList 0 -11) &quot;value2&quot;2) &quot;value3&quot;</code></pre><h4 id="hash">hash</h4><p>hash类似于JDK1.8之前的HashMap,内部实现差不多(数组 + 链表),不过Redis做了更多的优化.</p><p>应用场景: 系统中对象数据的存储</p><pre class="language-redis" data-language="redis"><code class="language-redis">&gt; hmset userInfo name &quot;zhangsan&quot; sex &quot;男&quot; age &quot;23&quot;OK# 查看 key 对应的 value中指定的字段是否存在&gt; hexists userInfo name(integer) 1# 获取指定字段的值&gt; hget userInfo name&quot;zhangsan&quot;# 获取key所有的字段和值&gt; hgetall userInfo1) &quot;name&quot;2) &quot;zhangsan&quot;3) &quot;sex&quot;4) &quot;男&quot;5) &quot;age&quot;6) &quot;23&quot;# 获取key所有的字段&gt; hkeys userInfo1) &quot;name&quot;2) &quot;sex&quot;3) &quot;age&quot;# 获取key所有字段的值&gt; hvals userInfo1) &quot;zhangsan&quot;2) &quot;男&quot;3) &quot;23&quot;# 修改某个字段的值&gt; hset userInfo name &quot;张三&quot;0&gt; hget userInfo name&quot;张三&quot;</code></pre><h4 id="set">set</h4><p>set类似于Java中的<code>HashSet</code>.Redis中的set类型是一种无序集合.集合中的元素没有先后顺序.当你需要存储一个列表数据,又不希望出现重复数据时,set是一个很好地选择,并且set提供了判断某个成员是否在一个set集合内的重要接口.可以基于set轻易实现交集、并集、差集的操作.例如: <strong>你可以将一个用户所有的关注存在一个集合中,将其所有粉丝存在一个集合.Redis可以非常方便的实现如共同关注、共同粉丝、共同喜好等功能,也就是求交集的过程</strong>.</p><p>应用场景: 需要存放的数据不能重复及需要获取多个数据源交集和并集等场景.</p><pre class="language-redis" data-language="redis"><code class="language-redis">&gt; sadd mySet value1 value2(integer) 2# 不允许添加重复元素&gt; sadd mySet value1(integer) 0# 查看set中所有的元素&gt; smembers mySet1) &quot;value2&quot;2) &quot;value1&quot;# 查看set的长度&gt; scard mySet2# 判断某个元素是否在set中&gt; sismember mySet value1(integer) 1&gt; sadd mySet2 value2 value3(integer) 2# 求 mySet 和 mySet2 的交集&gt; sinterstore mySet3 mySet mySet21&gt; smembers mySet31) &quot;value2&quot;</code></pre><h4 id="sorted-set">sorted set</h4><p>和set相比,sorted set增加了一个权重参数<code>score</code>,使得集合中的元素按照<code>score</code>进行有序排列,还可以通过<code>score</code>的范围来获取元素的列表.</p><p>应用场景: 需要对数据根据某个权重进行排序的场景.比如在直播系统中,实时排行信息包含直播间在线用户列表,各种礼物排行榜,弹幕消息.</p><pre class="language-redis" data-language="redis"><code class="language-redis">添加元素到 sorted set 中 3.0为权重study:0&gt;zadd myZset 3.0 value1&quot;1&quot;一次添加多个元素study:0&gt;zadd myZset 2.0 value2 1.0 value3&quot;2&quot;查看sorted set中的元素个数study:0&gt;zcard myZset&quot;3&quot;查看某个元素的权重study:0&gt;zscore myZset value1&quot;3&quot;顺序输出某个范围的元素, 0 -1表示输出全部元素study:0&gt;zrange myZset 0 -11) &quot;value3&quot;2) &quot;value2&quot;3) &quot;value1&quot;顺序输出某个范围的元素study:0&gt;zrange myZset 0 11) &quot;value3&quot;2) &quot;value2&quot;逆序输出某个范围的元素study:0&gt;zrevrange myZset 0 11) &quot;value1&quot;2) &quot;value2&quot;</code></pre><h4 id="bitmap">bitmap</h4><p>bitmap存储的是连续的二进制数字(0和1),通过bitmap,只需要一个bit位来表示某个元素对应的值或者状态,key就是对应元素本身.</p><p>应用场景: 适合需要保存状态信息(比如是否签到、是否登录…)并需要进一步对这些信息进行分析的场景.比如用户签到情况、活跃用户情况、用户行为统计.</p><pre class="language-redis" data-language="redis"><code class="language-redis">study:0&gt;setbit mykey 7 1&quot;0&quot;study:0&gt;setbit mykey 7 0&quot;1&quot;study:0&gt;getbit mykey 7&quot;0&quot;study:0&gt;setbit mykey 6 1&quot;0&quot;study:0&gt;setbit mykey 8 1&quot;0&quot;# 通过 bitcount 统计被设置为1的位数量study:0&gt;bitcount mykey&quot;2&quot;</code></pre><h3 id="Redis是单线程还是多线程">Redis是单线程还是多线程</h3><p>Redis基于Reactor模式来设计了一套自己得事件处理模型,这套事件处理模型对应的是Redis中的<strong>文件事件处理器</strong>.<strong>由于文件事件处理器是单线程运行的,所以我们一般都说Redis是单线程的</strong>.</p><h4 id="既然是单线程-那怎么监听大量的客户端连接">既然是单线程,那怎么监听大量的客户端连接?</h4><p>Redis通过<strong>IO多路复用程序</strong>(一个老师让30个同学回答问题,老师只需要站在讲台上等,谁解答完谁举手,老师根据举手的同学做出处理即可<a href="https://www.zhihu.com/question/28594409">详细解释</a>)来监听来自客户端的大量连接,让Redis不需要额外创建多余的线程来监听客户端连接,降低了资源消耗.</p><h4 id="事件处理器">事件处理器</h4><ul><li>多个socket(客户端连接)</li><li>IO多路复用程序(支持多个客户端连接的关键)</li><li>文件事件分派器(将socket关联到相应的事件处理器)</li><li>事件处理器(连接应答处理器、命令请求处理器、命令回复处理器)</li></ul><h4 id="Redis没有使用多线程-为什么不使用多线程">Redis没有使用多线程?为什么不使用多线程</h4><p>虽然Redis是单线程模型,但是<strong>Redis在4.0之后的版本中就已经加入了对多线程的支持</strong>.不过,Redis4.0增加的多线程主要针对一些大健值对的删除操作的命令,使用这些命令就会使用主处理之外的其他线程来&quot;异步处理&quot;</p><p><strong>至于为什么不使用多线程</strong>:</p><ul><li>单线程编程容易且易于维护</li><li>Redis的性能瓶颈不再是CPU,主要在内存和网络</li><li>多线程就会存在死锁、线程上下文切换等问题.</li></ul><h4 id="Redis6-0之后为何引入了多线程">Redis6.0之后为何引入了多线程</h4><p><strong>Redis6.0引入了多线程主要是为了提高网络IO读写性能</strong>.虽然,Redis6.0引入了多线程,但是Redis的多线程只是在网络数据的读写这类耗时操作上使用了,执行命令仍是单线程顺序执行.</p><p>Redis6.0的多线程是默认关闭的,开启需要修改Redis的配置文件:</p><pre class="language-none"><code class="language-none">io-threads-do-reads yes</code></pre><p>开启多线程后,还需要设置线程数,否则是不生效的.同样需要修改Redis配置文件:</p><pre class="language-none"><code class="language-none"># 官网建议4核的机器建议设置为2或3个线程，8核的建议设置为6个线程io-threads 4 </code></pre><h3 id="Redis过期删除策略">Redis过期删除策略</h3><ul><li><strong>惰性删除</strong>: 只会在取出key的时候才对数据进行过期检查,这样对CPU最友好,但是可能会造成太多过期key没有被删除</li><li><strong>定期删除</strong>: 每隔一段时间抽取一批key执行删除过期key操作.并且,Redis底层会通过限制删除操作执行的时长和频率减少删除操作对CPU的影响.</li></ul><p>定期删除对内存更加友好,惰性删除对CPU更加友好.所以Redis采用的是<strong>定期删除+惰性删除</strong>.</p><h3 id="Redis内存淘汰机制">Redis内存淘汰机制</h3><p>相关问题: MySQL里有2000w数据,Redis中只存20w的数据,如何保证Redis中的数据都是热点数据</p><p>Redis提供6种淘汰策略:</p><ul><li><strong>volatile-lru</strong>: 从已经设置过期时间的数据集中挑选最近最少使用的数据淘汰</li><li><strong>volatile-ttl</strong>: 从已设置过期时间的数据集中挑选将要过期的数据淘汰</li><li><strong>volatile-random</strong>: 从已设置过期时间的数据集中任意数据淘汰</li><li><strong>allkeys-lru</strong>: 当内存不足以容纳新写入数据时,在键空间中,移除最近最少使用的key(最常用)</li><li><strong>allkeys-random</strong>: 从数据集中任意选择数据淘汰</li><li><strong>no-eviction</strong>: 禁止驱逐数据,也就是说当内存不足以容纳新写入数据时,新写入的数据会报错.</li></ul><p>4.0版本后增加的:</p><ul><li><strong>volatile-lfu</strong>: 从已设置过期时间的数据集中挑选最不常用的数据淘汰</li><li><strong>allkeys-lfu</strong>: 当内存不足以容纳新写入数据时,在键空间中,移除最不常用的key</li></ul><h3 id="Redis持久化机制">Redis持久化机制</h3><h4 id="快照持久化-RDB">快照持久化(RDB)</h4><p>Redis可以通过创建快照的方式来获取存储在内存里面的数据在某个时间点的副本.Redis创建快照后,可以对快照进行备份,可以将快照复制到其他服务器从而创建具有相同数据的服务器副本(Redis主从结构),还可以将快照留在原地以便重启服务器的时候使用.</p><p>快照持久化是Redis默认采用的持久化方式,在Redis.conf配置文件中默认有以下配置:</p><pre class="language-none"><code class="language-none"># 在900秒(15分钟)之后,如果至少有一个1key发生变化,Redis就会自动触发BGSAVE命令创建快照save 900 1# 在300秒(5分钟)之后,如果至少有10个key发生变化,Redis就会自动触发BGSAVE命令创建快照save 300 10 # 在60秒(1分钟)之后,如果至少有10000个key发生变化,Redis就会自动触发BGSAVE命令创建快照save 60 10000</code></pre><h4 id="AOF持久化">AOF持久化</h4><p>与RDB相比,AOF持久化的实时性更好,因此已经成为主流的持久化方案.默认情况下Redis没有开启AOF方式的持久化,可以通过<code>appendonly</code>参数开启:</p><pre class="language-none"><code class="language-none">appendonly yes</code></pre><p>开启AOF持久化后每执行一条会更改Redis中的数据的命令,Redis就会将该命令写入硬盘中的AOF文件.AOF文件的保存的位置和RDB文件位置相同.</p><p>在Redis的配置文件中存在三种不同的AOF持久化方式:</p><pre class="language-none"><code class="language-none"># 每次数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度appendsync always# 每秒同步一次,显示的将多个写命令同步到硬盘appendsync everysec# 让操作系统确定何时进行同步appendsync no</code></pre><p>为了兼顾数据和写入性能,用户可以考虑<code>appendsync everysec</code>选项,让Redis每秒同步一次AOF文件,Redis性能几乎没受到任何影响.而且这样即使出现系统崩溃,用户最多只会丢失1秒之内产生的数据.</p><h5 id="AOF重写">AOF重写</h5><p>AOF重写可以产生一个新的AOF文件,这个新的AOF文件和原有的AOF文件所保存的数据状态是一样的,但是体积更小.</p><p>AOF重写是一个有歧义的名字,该功能是通过读取数据库中的键值对来实现的,程序无需对现有的AOF文件进行任何读入、分析或者写入操作.</p><p>再执行<code>BGREWRITEAOF</code>命令时,Redis服务器会维护一个AOF重写缓冲区,该缓冲区会在子进程创建新的AOF文件期间,记录服务器执行的所有写命令.当子进程完成创建新的AOF文件之后,服务器会将重写缓冲区中的所有内容追加到新的AOF文件末尾,使得新旧两个AOF文件保存的数据库状态一致.</p><h3 id="什么是缓存穿透-什么是缓存雪崩-什么是缓存击穿-怎么解决">什么是缓存穿透?什么是缓存雪崩?什么是缓存击穿?怎么解决</h3><h4 id="什么是缓存穿透">什么是缓存穿透</h4><p>缓存穿透说简单点就是大量请求的key根本不存在于缓存中,导致请求直接到了数据库上,根本没有经过缓存这一层.</p><h4 id="缓存穿透解决办法">缓存穿透解决办法</h4><ul><li><p>缓存无效key</p><p>如果缓存和数据库都查不到某个key的数据就写一个到Redis中设置过期时间.这种方式可以解决请求的key变化不频繁的情况,但是如果是每次请求都构建不同的key,会导致Redis中缓存大量的无效的key,这种方法十分的不明智.</p></li><li><p>布隆过滤器</p><p>把所有可能存在的请求的值都存放在布隆过滤器中,当用户请求过来,先判断用户发来的请求的值是否存在于布隆过滤器中.不存在在的话,直接返回请求参数错误的信息给客户端,存在的话才会走后面的流程.</p></li></ul><h4 id="什么是缓存雪崩">什么是缓存雪崩</h4><p>缓存在同一时间大面积的失效,后面的请求都直接落到了数据库上,造成数据库短时间内承受了大量请求.有可能会导致数据库直接宕机.</p><h4 id="缓存雪崩解决办法">缓存雪崩解决办法</h4><ul><li>设置不同的失效时间,比如随机设置缓存的失效时间</li><li>缓存永不失效</li></ul><h4 id="什么是缓存击穿">什么是缓存击穿</h4><p>这个其实和雪崩有点类似,只不过缓存击穿是热点key失效,导致大量请求落到了数据库上</p><h4 id="缓存击穿解决办法">缓存击穿解决办法</h4><ul><li>设置热点key永不失效</li><li>设置互斥锁,只有拿到锁的才可以查询数据库,防止同一时间大量请求</li></ul><h3 id="设计一个分布式锁">设计一个分布式锁</h3><p>来自小米信息部技术团队的文章<a href="https://xiaomi-info.github.io/2019/12/17/redis-distributed-lock/">分布式锁的实现之Redis篇</a></p><p>Redis锁主要利用Redis的setnx命令:</p><ul><li>加锁命令: <code>setnx key value</code>,当key不存在时,对key进行设置操作并返回成功,否则返回失败.key是锁的唯一标识,一般按照业务来决定命名.</li><li>解锁命令: <code>del key</code>,通过删除键值对释放锁,以便其他线程可以通过<code>setnx</code>命令来获取锁</li><li>锁超时: <code>expire key timeout</code>,设置key的超时时间,以保证即使锁没有被显示的释放,锁也可以在一定时间后自动释放,避免资源被永远锁住.</li></ul><p>但是这样设计存在几个问题:</p><ul><li><p><strong>setnx和expire非原子性</strong></p><p>如果<code>setnx</code>成功,在设置锁超时时间后,服务器挂掉、重启或者网络问题等,导致<code>expire</code>命令没有执行,锁没有设置超时时间变成死锁.</p></li><li><p><strong>锁误解除</strong></p><p>如果线程A成功获取到了锁,并且设置了过期时间30秒,但线程A执行时间超过了30秒,锁过期自动释放,此时线程B获取到了锁;随后A执行完成,线程A使用<code>del key</code>命令释放锁,但此时线程B加的锁还没有执行完成,线程A实际上释放的是线程B的锁.</p><p>解决: 通过在value中设置当前线程加锁的标识,在删除之前验证Key对应的value,判断锁是不是当前线程持有.</p></li><li><p><strong>超时解锁导致并发</strong></p><p>如果线程A成功获取锁并设置过期时间30秒,但是线程A执行时间超过了30秒,锁过期自动释放,此时线程B获取到了锁,线程A和线程B并发执行.</p><p>解决: 将过期时间设置足够长,确保代码逻辑在锁释放之前能够执行完成;或者为获取锁的线程增加线程守护,为将要过期但是未过期的锁增加有效时间.</p></li><li><p><strong>不可重入</strong></p><p>如果一个不可重入锁被再次加锁,由于该锁已经被持有,再次加锁会失败.Redis可通过对锁进行重入计数,加锁时加1,解锁时减1,当计数归0时释放锁.</p></li><li><p><strong>无法等待锁释放</strong></p><p>上述命令执行都是立即返回的,如果客户端可以等待锁释放就无法使用.</p><p>解决: 使用Redis发布订阅功能,当获取锁失败时,订阅锁释放消息,获取锁成功后释放时,发送锁释放消息</p></li></ul><h3 id="Redis事务">Redis事务</h3><p>Redis可以通过<code>multi、exec、discard和watch</code>等命令实现事务功能.</p><pre class="language-redis" data-language="redis"><code class="language-redis">study:0&gt;multi&quot;OK&quot;study:0&gt;set user &quot;daochen23&quot;&quot;QUEUED&quot;study:0&gt;get user&quot;QUEUED&quot;study:0&gt;exec1) &quot;OK&quot;2) &quot;OK&quot;3) &quot;OK&quot;4) &quot;daochen23&quot;5) &quot;OK</code></pre><p>使用<code>multi</code>命令后可以输入多个命令.Redis不会立即执行这些命令,而是将它们放到队列,当调用<code>exec</code>命令将执行所有命令.</p><ol><li>开启事务(<code>multi</code>)</li><li>命令入队(批量操作Redis的命令,先进先出(FIFO)的顺序执行)</li><li>执行事务(<code>EXEC</code>)</li></ol><p>也可以通过<code>discard</code>命令取消一个事务,它会清空事务队列中的所有命令</p><p><code>watch</code>命令用于监听指定的键,当调用<code>exec</code>命令执行事务时,如果一个被<code>watch</code>命令监听的键被修改的话,整个事务都不会执行,直接返回失败.</p><p>Redis不支持roll back,因此不支持事务的原子性:</p><ul><li>若在事务多列中存在命令性错误(类似于Java编译性错误),则执行<code>exec</code>命令时,所有命令都不会执行</li><li>若在事务队列中存在语法性错误(类似于Java的<code>1 / 0</code>的运行时异常),则执行<code>exec</code>命令时,其他正确命令会被执行,错误命令抛出异常.</li></ul><h3 id="如何保证-Redis-和-MySQL-的数据一致性">如何保证 Redis 和 MySQL 的数据一致性</h3><p>采用<strong>旁路缓存模式</strong>(cache aside pattern).</p><p>在旁路缓存模式中遇到写请求是这样的: <strong>更新数据库,然后直接删除缓存</strong></p><p>如果更新数据库成功,而删除缓存这一步是失败的话,有两个方案:</p><ul><li><strong>缓存失效时间变短</strong>(不推荐): 让缓存数据的过期时间变短,这样的话缓存就会从数据库中加载数据</li><li><strong>增加缓存更新重试机制</strong>: 如果缓存服务当前不可用导致缓存删除失败的话,就隔一段时间进行重试,重试次数可以自己定.如果多次重试还是失败的话,我们可以把当前更新失败的key存入队列中,等缓存服务可用之后,再将缓存中对应的key删除.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试骚套路之MySQL</title>
      <link href="2021/07/20/java-mysql/"/>
      <url>2021/07/20/java-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="Java面试骚套路之MySQL">Java面试骚套路之MySQL</h2><h3 id="ORDER-BY、LIMIT、GROUP-BY、HAVING这些关键字分别是做什么用的">ORDER BY、LIMIT、GROUP BY、HAVING这些关键字分别是做什么用的.</h3><ul><li><p>ORDER BY: 按照那个字段进行排序.<code>ASC</code>升序,<code>DESC</code>降序</p></li><li><p>LIMIT: 强制返回的数据条数,如<code>SELECT xx FROM table LIMIT 1</code>就是返回一条数据,如果数据库中有20条数据,<code>LIMIT</code>数量为21,那么就返回20条数据</p></li><li><p>GROUP BY: 按照哪个字段进行分组.需要注意的是分组的字段需要出现在返回结果中,而没有在分组字段中出现的,则不可以出现在返回结果中.如:</p><p><img src="https://img.kandx.icu/img/20210720165152.png" alt="GROUP BY 正确用法"></p><p><img src="https://img.kandx.icu/img/20210720165240.png" alt="GROUP BY 错误用法"></p><p>但是,如果查询结果中没有在分组列表中出现,也可以使用聚合函数.</p></li><li><p>HAVING: 根据指定条件进行过滤,一般搭配着<code>GROUP BY</code>使用.如: <img src="https://img.kandx.icu/img/20210720170348.png" alt="HAVING使用"></p></li></ul><h3 id="左连接和右连接的区别">左连接和右连接的区别</h3><ul><li>左连接: <code>left join</code>即保证左表的数据完整性.</li><li>右连接: <code>right join</code>即保证右表的数据完整性.</li></ul><h4 id="区别">区别</h4><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span><span class="token operator">*</span> <span class="token keyword">FROM</span>wms_task<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> task <span class="token keyword">ON</span> task<span class="token punctuation">.</span>task_id <span class="token operator">=</span> wms_task<span class="token punctuation">.</span>wms_task_id</code></pre><p><img src="https://img.kandx.icu/img/20210720172450.png" alt="左连接"></p><p>左连接会保证左边的数据完整性,不管左表中的数据会不会在右表(task)中包含,都会返回出来.</p><p>如果将<code>LEFT JOIN</code>改为<code>RIGHT JOIN</code>:</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span><span class="token operator">*</span> <span class="token keyword">FROM</span>wms_task<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> task <span class="token keyword">ON</span> task<span class="token punctuation">.</span>task_id <span class="token operator">=</span> wms_task<span class="token punctuation">.</span>wms_task_id</code></pre><p>那么返回的数据集就会保证右表(task)的数据完整性.</p><h3 id="MySQL常用数据类型、运算符、常用函数">MySQL常用数据类型、运算符、常用函数</h3><ul><li><p>数据类型</p><ol><li><p>数值类型</p><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>tinyint</td><td>1 byte</td><td>小整数值</td></tr><tr><td>smallint</td><td>2 byte</td><td>大整数值</td></tr><tr><td>mediumint</td><td>3 byte</td><td>大整数值</td></tr><tr><td>int</td><td>4 byte</td><td>大整数值</td></tr><tr><td>bigint</td><td>8 byte</td><td>极大整数值</td></tr><tr><td>float</td><td>4 byte</td><td>单精度浮点数值</td></tr><tr><td>double</td><td>8 byte</td><td>双精度浮点数值</td></tr><tr><td>decimal</td><td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td>小数值</td></tr></tbody></table></li><li><p>日期和时间类型</p><table><thead><tr><th>类型</th><th>大小</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>date</td><td>3 byte</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>time</td><td>3 byte</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>year</td><td>1 byte</td><td>YYYY</td><td>年份值</td></tr><tr><td>datetime</td><td>8 byte</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>timestamp</td><td>4 byte</td><td>YYYYMMDD HHMMSS</td><td>混合日期和时间值,时间戳</td></tr></tbody></table></li><li><p>字符串类型</p><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>char</td><td>0-255 byte</td><td>定长字符串</td></tr><tr><td>varchar</td><td>0-65535 byte</td><td>变长字符串</td></tr><tr><td>tinyblob</td><td>0-255 byte</td><td>不超过255个字符的二进制字符串</td></tr><tr><td>tinytext</td><td>0-255 byte</td><td>短文本字符串</td></tr><tr><td>blob</td><td>0-65535 byte</td><td>二进制形式的长文本数据</td></tr><tr><td>text</td><td>0-65535 byte</td><td>长文本数据</td></tr><tr><td>mediumblob</td><td>0-16777215 byte</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>mediumtext</td><td>0-16777215 byte</td><td>中等长度文本数据</td></tr><tr><td>longblob</td><td>0-4294967295 byte</td><td>二进制形式的极大文本数据</td></tr><tr><td>longtext</td><td>0-4294967295 byte</td><td>极大文本数据</td></tr></tbody></table></li></ol></li><li><p>常用运算符</p><ol><li><p>算术运算符</p><p>MySQL支持的算术运算符包括<strong>加减乘除和模运算</strong>.在除法运算和模运算中,如果除数为<code>0</code>,将是非法除数,返回结果为<code>NULL</code></p></li><li><p>比较运算符</p><p>当使用<code>SELECT</code>语句进行查询时,MySQL允许用户对表达式的左边操作数和右边操作数进行比较,比较结果为真,返回<code>1</code>,为假则返回<code>0</code>,比较结果不确定则返回<code>NULL</code></p><table><thead><tr><th>符号</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>=</td><td>等于</td><td></td></tr><tr><td>&lt;&gt;, !=</td><td>不等于</td><td></td></tr><tr><td>&gt;</td><td>大于</td><td></td></tr><tr><td>&lt;</td><td>小于</td><td></td></tr><tr><td>&lt;=</td><td>小于等于</td><td></td></tr><tr><td>&gt;=</td><td>大于等于</td><td></td></tr><tr><td>between</td><td>在两者之间</td><td>类似于 &gt; = min &amp;&amp; &lt; = max</td></tr><tr><td>not between</td><td>不在两者之间</td><td></td></tr><tr><td>in</td><td>在集合中</td><td></td></tr><tr><td>not in</td><td>不在集合中</td><td></td></tr><tr><td>&lt;=&gt;</td><td>严格比较两个<code>NULL</code>值是否相等</td><td>两个操作码均为<code>NULL</code>时,其所得值为<code>1</code>;而当一个操作码为<code>NULL</code>时,其所得值为<code>0</code></td></tr><tr><td>like</td><td>简单模式匹配</td><td></td></tr><tr><td>regexp</td><td>正则式匹配</td><td></td></tr><tr><td>is null</td><td>为空</td><td></td></tr><tr><td>is not null</td><td>不为空</td><td></td></tr></tbody></table></li><li><p>逻辑运算符</p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>and &amp;&amp;</td><td>逻辑与</td></tr><tr><td>or ||</td><td>逻辑或</td></tr><tr><td>not !</td><td>逻辑非</td></tr><tr><td>xor</td><td>异或</td></tr></tbody></table></li><li><p>位运算符</p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>&amp;</td><td>位与</td></tr><tr><td>|</td><td>位或</td></tr><tr><td>~</td><td>位取反</td></tr><tr><td>^</td><td>位异或</td></tr><tr><td>&gt;&gt;</td><td>右移</td></tr><tr><td>&lt;&lt;</td><td>左移</td></tr></tbody></table></li></ol></li><li><p>常用函数</p><p><a href="https://developer.aliyun.com/article/740242">MySQL常用函数</a></p></li></ul><h3 id="InnoDB、MyISAM和MEMORY的区别是什么">InnoDB、MyISAM和MEMORY的区别是什么</h3><h4 id="InnoDB">InnoDB</h4><p>InnoDB是MySQL的默认事务型引擎,也是最重要、使用最广泛的存储引擎.它被设计用来处理大量的短期事务,短期事务大部分情况是正常提交的,很少会被回滚.InnoDB的性能和自动崩溃恢复的性能,使得他在非事务型存储的需求中也很流行.除非有非常特别的原因需要使用其他存储引擎,否则应该优先考虑InnoDB引擎.</p><h4 id="MyISAM">MyISAM</h4><p>在MySQL5.1及之前的版本,MyISAM是默认的存储引擎.MyISAM提供了大量的新特性,包括全文索引、压缩、空间函数(GIS)等,但是MyISAM不支持事务和行级锁,而且有一个毫无疑问的缺陷就是崩溃后无法安全恢复.对于只读的数据,或者表比较小,可以忍受修复(repair)操作,则依然可以继续使用MyISAM.</p><h4 id="MEMORY">MEMORY</h4><p>如果需要快速访问数据,并且这些数据不会被修改,重启后丢失也没有关系,那么使用Memory引擎是非常有用的.MEMORY引擎至少比MyISAM引擎要快一个数量级,因为所有的数据都保存在内存中,不需要进行磁盘I/O.MEMORY引擎的表结构在重启以后还是会保留,但是数据会丢失.</p><h4 id="区别-2">区别</h4><ol><li><p>存储结构</p><p>InnoDB: 所有的表都保存在同一个数据文件中(也可能是多个文件,或者是独立的表空间文件),InnoDB表的大小只受限于操作系统文件的大小,一般为<strong>2GB</strong></p><p>MyISAM: 每个MyISAM在磁盘上存储成三个文件.分别为: <strong>表定义文件、数据文件、索引文件</strong>.第一个文件的名称以表名开始,扩展名指出文件类型.<code>.frm</code>文件存储表定义.数据文件的扩展名为<code>.MYD</code>.索引文件的扩展名是<code>.MYI</code></p></li><li><p>存储空间</p><p>InnoDB: 需要更多的内存和存储,它会在主内存中建立专用的缓冲池用于高速缓冲数据和索引</p><p>MyISAM: MyISAM支持三种不同的存储格式: 静态表(默认,但是注意数据末尾不可以有空格,会被去掉)、动态表和压缩表.当表在建立之后并导入数据之后,不会再进行修改操作,可以使用压缩表,极大的减少磁盘的空间占用.</p></li><li><p>可移植性、备份和恢复</p><p>InnoDB: 可以拷贝数据文件、备份binlog或者用mysqldump,但是这种在数据量达到几十个G的时候就相对很痛苦了</p><p>MyISAM: 数据是以文件的形式存储,所以在跨平台的数据转移中会很方便.在备份和恢复时可单独针对某个表进行操作.</p><p>MEMORY: 因为数据都保存在内存中,所以无法进行简单的移植,备份和恢复</p></li><li><p>事务支持</p><p>InnoDB: 提供事务支持.具有事务(commit)、回滚(rollback)和崩溃修复的能力的事务安全表</p><p>MyISAM: 强调的是效率,每次查询具有原子性,其执行速度比InnoDB更快,但是不提供事务支持</p></li><li><p>自动递增</p><p>InnoDB: InnoDB中必须包含只有该字段的索引.引擎的自动增长列必须是索引,如果是组合索引也必须是组合索引的第一列</p><p>MyISAM: 可以和其他字段建立联合索引.引擎的自动增长列必须是索引,如果是组合索引,自动增长可以不是第一列,它可以根据前面几列排序后递增</p></li><li><p>表锁差异</p><p>InnoDB: 支持事务和行级锁是InnoDB的最大特色.行级锁大幅度提高了多用户并发操作的性能.但是InnoDB的行锁,只是在<code>where</code>的<strong>索引</strong>是有效的,非索引的<code>where</code>都会锁全表.</p><p>MyISAM: 只支持表级锁,用户在操作MyISAM表时,CRUD都会给表自动加锁,如果加锁以后的表满足<code>insert</code>并发的情况下,可以在表的尾部插入新的数据.</p></li><li><p>表主键</p><p>InnoDB: 如果没有设定主键或者非空唯一索引,就位自动生成一个6字节的主键(用户不可见)</p><p>MyISAM: 允许没有任何索引和主键表的存在,索引都是保存行的地址.</p></li></ol><h3 id="索引所采用的的数据结构-为什么要这样设计">索引所采用的的数据结构,为什么要这样设计</h3><p><a href="https://zhuanlan.zhihu.com/p/113917726">深入理解MySQL索引底层原理</a></p><h3 id="在数据库中创建索引的原则">在数据库中创建索引的原则</h3><ul><li><p><strong>搜索的索引列</strong></p><p>不一定是所要选择的列.换句话说,最适合索引的列是出现在<code>where</code>子句中的列,或者连接子句中指定的列,而不是出现在<code>select</code>关键字后的选择列表中的列.</p></li><li><p><strong>使用唯一索引</strong></p><p>考虑某列中值的分布.索引的列的基数越大,索引的效果越好,例如:存放出生日期的列具有不同值,很容易区分各行.而用来记录性别的列,只有两个值,则对此列进行索引没有多大用处,因为不管搜索哪个值,都会得出大约一半的行</p></li><li><p><strong>使用短索引</strong></p><p>如果对字符串列进行索引,应该指定一个前缀长度,只要有可能就应该这么做.例如,如果有一个<code>CHAR(200)</code>的列,如果在前10个或者20个字符内,多数值是唯一的,那么就不要对整个列进行索引.对前10个或20个字符进行索引能够节省大量索引空间,也可能会使查询更快.较小的索引涉及的磁盘IO较少,较短的值比较起来更快.更为重要的是,对于较短的键值,索引高速缓存中的块能容纳更多的键值,因此,MySQL也可以在内存中容纳更多的值.这样就增加了找到行而不用读取索引中较多块的可能性</p></li><li><p><strong>利用最左前缀</strong></p><p>在创建一个n列的索引时,实际是创建了MySQL可利用的n个索引.多列索引可起几个索引的作用,因为可利用索引中最左边的列集称为最左前缀</p></li><li><p><strong>不要过度索引</strong></p><p>不要以为索引&quot;越多越好&quot;,什么东西都用索引是错误的.每个额外的索引都要占用额外的磁盘空间,并降低写操作的性能.在修改表的内容时,索引必须进行更新,有时可能需要重构,因此,索引越多,所花的时间越长.如果有一个索引很少利用或从不使用,那么会不必要地减缓表的修改速度.此外,MySQL在生成一个执行计划时,要考虑各个索引,这也要花费时间.创建多余的索引给查询优化带来了更多的工作.索引太多,也可能使MySQL选择不到所要使用的最好索引.只保持所需要的索引有利于查询优化.</p></li><li><p>对于InnoDB存储引擎的表,记录默认会按照一定的顺序保存,如果有明确定义的主键,则按照主键顺序保存.如果没有主键,但是有唯一索引,那么按照唯一索引的顺序保存.如果既没有主键又没有唯一索引,那么表中会自动生成一个内部列,按照这个顺序保存.按照主键或者内部列进行访问是最快的,所以InnoDB表尽量自己指定主键,当表中同时有几个列都是唯一的,都可以作为主键的时候,要选择最常作为访问条件的列作为主键,提高查询的效率.另外,还需要注意,InnoDB表的普通索引都会保存主键的值,所以主键要尽可能选择较短的数据类型,可以有效地减少索引的磁盘占用,提高缩印的缓存效果.</p></li></ul><h3 id="BTree索引和Hash索引的适用范围">BTree索引和Hash索引的适用范围</h3><p>MEMORY存储引擎的表可以选择使用BTree索引或者Hash索引,两种不同类型的索引各有其不同的适用范围.Hash索引有一些重要的特征需要在使用的时候特别注意:</p><ul><li>只能用于<code>=</code>或者<code>&lt;=&gt;</code>操作符的等式比较</li><li>优化器不能使用Hash索引来加速<code>ORDER BY</code>操作</li><li>MySQL不能确定在两个值之间大约有多少行.如果将一个MyISAM表改为Hash索引的MEMORY表,会影响一些查询的执行效率</li><li>只能使用整个关键字来搜索一行.</li></ul><p>而对于BTree索引,当使用<code>&gt;、&lt;、&gt;=、&lt;=、between、!=、&lt;&gt;以及like 'pattern'</code>(其中’pattern’不以通配符开始)操作符时,都可以使用相关列上的索引.</p><h3 id="优化SQL语句的步骤有哪些">优化SQL语句的步骤有哪些</h3><ol><li><p>通过<code>show status</code>命令了解各种SQL的执行频率</p><p><code>show [session] [global] status</code>可以根据需要加上参数<code>session</code>或者<code>global</code>来显示session级(当前连接)的统计结果和global级(自数据库上次启动至今)的统计结果.如果不写,默认使用的参数是<code>session</code></p><p><img src="https://img.kandx.icu/img/20210722092037.png" alt="查询SQL执行频率"></p><p><code>Com_xx</code>表示每个xx语句执行的次数:</p><ul><li>Com_select: 执行select操作的次数,一次查询只累加1</li><li>Com_insert: 执行insert操作的次数,对于批量插入的insert操作,只累加一次</li><li>Com_update: 执行update操作次数</li><li>Com_delete: 执行delete操作次数</li></ul><p>上面这些参数对于所有的存储引擎的表操作都会进行累计,下面的这些参数只是针对InnoDB存储引擎的,累加的算法也略有不同:</p><ul><li>Innodb_row_read: select查询返回的行数</li><li>Innodb_rows_inserted: 执行insert操作插入的行数</li><li>Innodb_rows_updated: 执行update操作更新的行数</li><li>Innodb_rows_deleted: 执行delete操作删除的行数</li></ul><p>通过以上几个参数,可以很容易的了解当前数据库的应用是以插入更新为主还是以查询操作为主,以及各类的SQL大致的执行比例是多少.对于更新操作的计数,是对执行次数的计数,不论提交还是回滚都会进行累加.对于事务型的应用,通过<code>Com_commit</code>和<code>Com_rollback</code>可以了解事务提交和回滚情况,对于回滚操作非常频繁的数据库,可能意味着应用的编写出现了问题</p></li><li><p>定位执行效率较低的SQL语句</p><ul><li>通过慢查询日志定位那些执行效率低下的SQL语句,用<code>--log-slow-queries[=file_name]</code>选项启动是,mysqld写一个包含所有执行时间超过<code>long_query_time</code>秒的SQL语句日志文件</li><li>慢查询日志在查询结束以后才记录,所以在应用反应执行效率出现问题的时候查看慢查询日志并不能定位问题,可以使用<code>show processlist</code>命令查看当前MySQL在进行的线程,包括线程的状态、是否锁表等,可以实时的查看SQL的执行情况,同时对一些锁表操作进行优化.</li></ul></li><li><p>通过<code>EXPLAIN</code>分析低效SQL的执行计划</p><p>通过<code>explain</code>或者<code>desc</code>命令获取MySQL如何执行select语句的信息,包括在select语句执行过程中表如何连接和连接顺序.</p><ul><li>select_type: 表示select的类型,常见的取值有<strong>simple</strong>(简单表,即不适用表连接或者子查询)、<strong>primary</strong>(主查询,即外层查询)、<strong>union</strong>(union中的第二个或者后面的查询语句)、<strong>subquery</strong>(子查询中的第一个select)等</li><li>table: 输出结果集的表</li><li>type: 表示表的链接类型,性能由好到差的链接类型为<strong>system</strong>(表中仅有一行,即常量表)、<strong>const</strong>(单表中最多有一个匹配行,例如primary key或者unique index)、<strong>eq_ref</strong>(对于前面的每一行,在此表中只查询一条记录,简单来说,就是多表链接中使用primary key或者unique index,而是使用普通的索引)、<strong>ref_or_null</strong>(与ref类似,区别在于条件中包含对<code>NULL</code>的查询)、<strong>index_merge</strong>(索引合并优化)、<strong>unique_subquery</strong>(<code>in</code>的后面是一个查询主键字段的子查询)、<strong>index_subquery</strong>(与unique_subquery类似,区别在于<code>in</code>的后面是查询非唯一索引字段的子查询)、<strong>range</strong>(单表中的范围查询)、<strong>index</strong>(对于前面的每一行,都通过查询索引来得到数据)、<strong>all</strong>(对于前面的每一行,都通过全表扫描来得到数据)</li><li>possible_keys: 表示查询时,可能使用的索引</li><li>key: 表中实际使用的索引</li><li>key_len: 索引字段的长度</li><li>rows: 扫描行的数量</li><li>extra: 执行情况的说明和描述</li></ul></li><li><p>确定问题并采取相应的优化措施</p></li></ol><h3 id="哪些场景可以使用索引">哪些场景可以使用索引</h3><ul><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该作为索引(where后面的语句)</li><li>查询中与其它表关联的字段,外键关系建立索引</li><li>查询中排序的字段,统计的字段或者分组的字段使用索引会加大效率</li></ul><h3 id="索引在哪些情况下会失效">索引在哪些情况下会失效</h3><ul><li>用<code>or</code>分隔开的条件,如果<code>or</code>前的条件中的列有索引,而后面的列中没有索引,那么涉及到的索引都不会被用到</li><li>如果不是索引列的第一部分,如复合索引<code>name,money</code>,而<code>select * from sales2 where moneys = 1</code>这样是用不到索引的</li><li>如果<code>like</code>是以<code>%</code>开始的也用不到索引</li><li>如果列类型是字符串,那么一定记得在<code>where</code>条件中把字符串常量用引号引起来,否则的话即便这个列有索引,MySQL也不会用到</li></ul><h3 id="事务的四大特性">事务的四大特性</h3><ul><li><strong>原子性</strong>: 事务是一个原子操作单元,其对数据的修改,要么全部执行,要么全都不执行</li><li><strong>一致性</strong>: 在事务开始和完成时,数据都必须保持一致状态,这意味着所有相关的数据规则都必须应用于事务的修改,以保持数据的完整性;事务结束时,所有的内部数据结构(如B树索引或双向链表)也都必须是正确的</li><li><strong>隔离性</strong>: 数据库系统提供一定的隔离机制,保证事务在不受外部并发操作影响的&quot;独立&quot;环境执行.这意味着事务处理过程中的中间状态是不可见的,反之亦然</li><li><strong>持久性</strong>: 事务完成后,它对数据的修改是永久性的,即使出现系统故障也能够保持</li></ul><h3 id="并发事务处理会带来哪些问题">并发事务处理会带来哪些问题</h3><ul><li><strong>更新丢失</strong>: 当两个或多个事务选择同一行,然后基于最初选定的值进行更新,由于每个事务都不知道其他事务的存在,就会发生丢失更新问题,最后的更新覆盖了其他事务所做的更新.</li><li><strong>脏读</strong>: 一个事务正在对一条记录做修改,在这个事务完成并提交前,这条记录的数据就处于不一致的状态;这时,另一个事务也来读取同一条记录,如果不加控制,第二个事务读取了这些<strong>脏数据</strong>,并据此做进一步的处理,就会产生未提交的数据依赖关系.这就是&quot;脏读&quot;.</li><li><strong>不可重复读</strong>: 一个事务在读取某些数据后的某个时间,再次读取以前读过的数据,却发现其读出的数据已经发生改变、或某些记录已经被删除了,这种现象就是&quot;不可重复读&quot;.</li><li><strong>幻读</strong>: 一个事务按相同的查询条件重新读取以前检索过的数据,却发现其他事务插入了满足其查询条件的新数据,这种现象就是&quot;幻读&quot;.</li></ul><h3 id="事务隔离级别">事务隔离级别</h3><table><thead><tr><th>隔离级别</th><th>读数据一致性</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>未提交读(Read uncommitted)</td><td>最低级别,只能保证不读取物理上损坏的数据</td><td>是</td><td>是</td><td>是</td></tr><tr><td>已提交读(Read committed)</td><td>语句级</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读(Repeatable read)</td><td>事务级</td><td>否</td><td>否</td><td>是</td></tr><tr><td>可序列化(Serializable)</td><td>最高隔离级别,事务级</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><p>MySQL默认的隔离级别是Repeatable read</p><h3 id="InnoDB行锁实现方式">InnoDB行锁实现方式</h3><p>InnoDB行锁是通过给索引上的索引项加锁来实现的.这种锁实现特点意味着:<strong>只有通过索引条件检索数据,InnoDB才使用行级锁,否则,InnoDB将使用表锁</strong></p><p>行锁注意点:</p><ul><li>在不通过索引条件查询的时候,InnoDB确实使用的是表锁,而不是行锁.</li><li>由于MySQL的行锁是针对索引加锁,不是针对记录加锁,所以虽然访问不是同行的记录,但是如果使用相同的索引键,是会出现锁冲突.</li><li>当表有多个索引的时候,不同的事务可以使用不同的索引锁定不同的行,另外,不论是使用主键索引、唯一索引或普通索引,InnoDB都会使用行锁来对数据加锁.</li><li>即便在条件中使用了索引字段,但是否使用索引来检索数据是由MySQL通过判断不同执行计划的代价来决定的,如果MySQL认为全表扫描效率更高,比如对一些很小的表,它就不会使用索引,这种情况下InnoDB使用表锁,而不是行锁.</li></ul><h3 id="了解间隙锁-Next-Key锁-么">了解间隙锁(Next-Key锁)么</h3><h4 id="什么是间隙锁">什么是间隙锁</h4><p>当我们用范围条件而不是相等条件检索数据,并请求共享或排它锁时,InnoDB会给符合条件的已有数据记录的索引项加锁;对于键值在条件范围内但并不存在的记录,叫做&quot;间隙锁&quot;.举个例子来说,假如emp表中只有101条记录,其中empid的值分别是1-101,这条SQL<code>select * from emp where empid &gt; 100;</code>是一个范围检索,InnoDB不仅会对符合条件的empid值为101的记录加锁,也会对empid大于101(这些记录并不存在)的&quot;间隙&quot;加锁</p><h4 id="间隙锁的目的">间隙锁的目的</h4><p>一方面是为了防止幻读,以满足相关隔离级别的要求,对于上面的例子,要是不使用间隙锁,如果其它事务插入了empid大于100的任何记录,那么本事务如果再次执行上述语句,就会发生幻读;另一方面,是为了满足其恢复和复制的需要.</p><h4 id="间隙锁的问题">间隙锁的问题</h4><p>在使用范围条件检索并锁定记录时,InnoDB这种加锁机制会阻塞符合条件范围内键值的并发插入,这往往会造成严重的锁等待.因此,在实际应用开发中,尤其是并发插入比较多的应用,我们要尽量优化业务逻辑,尽量使用相等条件来访问更新数据,避免使用范围条件.</p><p><strong>[tips]</strong>:InnoDB除了通过范围条件加锁使用间隙锁外,如果使用相等条件请求给一个不存在的记录加锁,InnoDB也会使用间隙锁!</p><h3 id="如何避免InnoDB中的死锁">如何避免InnoDB中的死锁</h3><ul><li>在应用中,如果不同的程序会并发存取多个表,应尽量约定以相同的顺序访问表,这样可以大大降低产生死锁的机会.</li><li>在程序以批量方式处理数据的时候,如果事先对数据排序,保证每个线程按固定的顺序来处理,也可以大大降低死锁的可能.</li><li>在事务中,如果要更新记录,应该直接申请足够级别的锁,即排他锁,而不应该申请共享锁,更新时再申请排它锁,因为当用户申请排它锁时,其他事务可能又已经获得了相同记录的共享锁,从而造成锁冲突,甚至死锁.</li><li>在不可重复读的事务隔离级别中,如果两个线程同时对相同条件记录用<code>select ... for update</code>加排他锁,在没有符合该条件记录情况下,两个线程都会加锁成功.程序发现记录尚不存在,就试图插入一条新的记录,如果两个线程都这么做,就会出现死锁.这种情况下,将事务隔离级别改成已提交读,就可以避免问题.</li><li>当隔离级别为已提交读时,如果两个线程都先执行<code>select ... for update</code>,判断是否存在符合条件的记录,如果没有,就插入记录.此时,只有一个线程能插入成功,另一个线程会出现锁等待,当第一个线程提交后,第二个线程会因为主键重复出错,但是虽然这个线程出错了,却获得了一个<strong>排它锁</strong>!这时,如果有第三个线程又来申请排它锁,也会出现死锁.对于这个情况,可以直接做插入操作,然后再捕获主键异常,或者在主键重复错误时,总是执行<strong>回滚</strong>释放获得的排它锁</li></ul><h3 id="数据库多版本并发控制-MVCC机制">数据库多版本并发控制(MVCC机制)</h3><p><a href="https://segmentfault.com/a/1190000037557620">MySQL的多版本并发控制</a></p><a class="btn-beautify button--animated green larger" href="https://www.kandx.icu/2021/07/23/java-redis"   title="八股文骚套路之Java基础"><i class="far fa-hand-point-right"></i><span>八股文骚套路之Java基础</span></a>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Map之HashMap</title>
      <link href="2021/07/02/Read-HashMap/"/>
      <url>2021/07/02/Read-HashMap/</url>
      
        <content type="html"><![CDATA[<h1>类结构</h1><p><img src="https://img.kandx.icu/img/20210702140937.png" alt="HashMap类关系图"></p><p><code>HashMap</code>实现于<code>Map</code>是它的主要实现类.以键值对(key-value)的方式存储数据.<code>HashMap</code>的线程是不安全的,但是效率较高,并且可以存储<code>null</code>的<code>key</code>和<code>value</code></p><h1>源码分析</h1><blockquote><p>底层数据结构</p></blockquote><ul><li><p>JDK1.8 数组 + 链表 + 红黑树</p><p>什么时候链表转换为红黑树?</p><p>当数组中一个索引位置的链表元素达到<code>8</code>个并且数组长度大于<code>64</code>时,链表元素将会转变为红黑树</p></li><li><p>JDK1.7 数组 + 链表</p></li></ul><p>这个变化带来的好处:</p><p>如果链表长度过多,每次添加如果索引位置相同那么就需要把链表所有的元素都要和要添加的元素进行比较,这样显然效率不高,而红黑树可以很好地解决这个问题</p><blockquote><p>构造器</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span> <span class="token comment">// all other fields defaulted</span><span class="token punctuation">&#125;</span></code></pre><p>这里和JDK1.7不同的是,1.8并没有直接创建一个长度为16的数组,而是将默认的<code>0.75f</code>的负载因子赋值给了<code>loadFactor</code>.而什么时候创建数组,就取决于什么时候进行元素添加的操作.</p><blockquote><p>添加元素</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>               <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// existing mapping for key</span>            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>分析:</strong></p><ol><li>首先创建一个<code>Node[]</code>数组,定义两个值<code>n、i</code>,通过<code>resize()</code>方法创建一个长度为<code>16</code>的<code>Node[]</code>数组</li><li>通过这个<code>tab[i = (n - 1) &amp; hash]</code>算法算出要存储的位置是不是个<code>null</code><ul><li>如果是,直接存储</li><li>如果不是,那么就是当前数组索引位置有值,判断当前索引位置的元素<code>p</code>的哈希值等不等于要存储元素的哈希值<code>p.hash == hash</code>并且当前数组中的元素<code>p</code>的<code>key</code>等于要存储的<code>key</code>(<code>(k = p.key) == key || (key != null &amp;&amp; key.equals(k)))</code>):<ul><li>如果满足那么就是要覆盖掉原来的元素内容</li><li>如果不是,判断一下<code>p</code>的类型是不是<code>TreeNode</code>如果是,那么已经从链表转变为了红黑树,然后通过<code>putTreeVal()</code>方法将要添加的元素存储到树中</li></ul></li><li>如果<code>hash</code>值既不相等又不是<code>TreeNode</code>类型,那么就是数组中的索引位置有值,判断这个索引位置有没有链表:<ul><li>如果没有,将当前元素的<code>next</code>指向要添加的元素,需要注意一点当添加的元素达到8个时,需要判断一下需不需要转变为红黑树</li><li>如果有,判断<code>hash</code>和<code>key</code>是否相同,是直接跳出循环这时的元素<code>e</code>就是当前链表中的元素,然后将要添加的元素覆盖掉<code>e</code></li></ul></li></ul></li></ol><blockquote><p>扩容</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token generics"><span class="token punctuation">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;</span><span class="token operator">&amp;</span>                 oldCap <span class="token punctuation">></span></span><span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// double threshold</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// initial capacity was placed in threshold</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// zero initial threshold signifies using defaults</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// preserve order</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>分析:</strong></p><ol><li>获取当前数组长度<code>oldCap</code>,阕值<code>oldThr</code>:<ul><li>如果长度大于<code>MAXIMUM_CAPACITY</code>,将<code>Integer</code>最大值赋值给阕值,返回老数组扩容完成.</li><li>如果老数组两倍的长度小于<code>MAXIMUM_CAPACITY</code>并且长度大于<code>16</code>,那么新的阕值就是老阕值的两倍</li></ul></li><li>如果老阕值大于<code>0</code>,那么新的数组长度就是老阕值</li><li>如果<code>oldCap</code>和<code>oldThr</code>都不大于<code>0</code>,那么新的数组长度就是<code>16</code>,阕值就是<code>12</code></li><li>如果新的阕值等于<code>0</code>且新的数组长度小于<code>MAXIMUM_CAPACITY</code>且计算后的阕值也小于<code>MAXIMUM_CAPACITY</code>,那么新的阕值就是<code>integer</code>的最大值</li><li>最后将老的数组内容赋值到新的数组中就算扩容完成</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 小知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合之HashSet</title>
      <link href="2021/06/29/Read-HashSet/"/>
      <url>2021/06/29/Read-HashSet/</url>
      
        <content type="html"><![CDATA[<h1>类结构</h1><p><img src="https://img.kandx.icu/img/20210629200909.png" alt="HashSet类关系"></p><p><code>HashSet</code>是<code>Set</code>接口的主要实现类,它是<strong>无序的、不可重复的、线程不安全</strong>的,可以存储<code>null</code>。需要知道的是,无序性并不是随机性,**存储的数据在底层数组中并非按照索引顺序添加,而是根据数据的哈希值决定的.**而不可重复性则是保证添加添加的元素按照<code>equals()</code>判断时,不可以返回<code>true</code>,即相同的元素只能有一个.</p><h1>源码分析</h1><blockquote><p>底层实现</p></blockquote><p><img src="https://img.kandx.icu/img/20210629203658.png" alt="HashSet底层实现"></p><p>可以看出来<code>HashSet</code>的底层数据结构其实是用<code>HashMap</code>实现的,具体的<code>HashMap</code>的源码分析请看这个文章<a href="https://www.kandx.icu/2021/07/02/Read-HashMap/">跳转</a></p><blockquote><p>添加元素</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>可以看到调用的<code>HashMap</code>的方法进行添加的,这里就不在解释了.我们解释一下<strong>无序性和不可重复性</strong>的添加过程:</p><p>向<code>HashSet</code>中添加元素<code>a</code>,首先调用元素<code>a</code>中的<code>hashCode()</code>,计算元素<code>a</code>的哈希值.计算出的哈希值通过某种算法计算出在<code>HashSet</code>底层数组中的存放位置(索引位置),判断数组此位置是否已经有元素:</p><ul><li>如果此位置没有元素,则元素添加成功.</li><li>如果此位置有其它元素<code>b</code>(或者以链表形式存在的多个元素),则比较元素<code>a</code>和元素<code>b</code>的哈希值:<ul><li>如果哈希值不相同,则元素<code>a</code>添加成功</li><li>如果哈希值相同,那么就需要调用元素<code>a</code>所在类的<code>equals()</code>:<ul><li><code>equals()</code>返回<code>true</code>,元素<code>a</code>添加失败</li><li><code>equals()</code>返回<code>false</code>,元素<code>a</code>添加成功</li></ul></li></ul></li></ul><p>另外对于添加成功的情况而言:元素<code>a</code>与已经存在指定索引位置上数据以链表的形式存储:</p><ul><li><p>JDK1.7: 元素<code>a</code>添加到元素<code>b</code>的位置</p><p><img src="https://img.kandx.icu/img/20210702102015.png" alt="添加前"></p><p><img src="https://img.kandx.icu/img/20210702102103.png" alt="添加后"></p><p>元素<code>a</code>放到数组中,指向原来的元素</p></li><li><p>JDK1.8: 元素<code>a</code>添加到元素<code>b</code>的位置</p><p><img src="https://img.kandx.icu/img/20210702102015.png" alt="添加前"></p><p><img src="https://img.kandx.icu/img/20210702102306.png" alt="添加后"></p></li></ul><p>原来的元素在数组中,指向元素<code>a</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 小知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合之LinkedList</title>
      <link href="2021/06/27/Read-LinkedList/"/>
      <url>2021/06/27/Read-LinkedList/</url>
      
        <content type="html"><![CDATA[<h1>类结构</h1><p><img src="https://img.kandx.icu/img/20210629160927.png" alt="LinkedList类关系"></p><h1>源码分析</h1><blockquote><p>底层实现</p></blockquote><p><code>LinkedList</code>的底层存储结构是双向链表,对于频繁的插入删除操作效率要比<code>ArrayList</code>高</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">E</span> item<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>和<code>ArrayList</code>不同的是:<code>ArrayList</code>是用<code>Object[]</code>存储元素,而<code>ArrayList</code>则是用<code>Node</code>来代表一个元素,<code>next</code>和<code>prev</code>则是代表这个元素的上一个元素和后一个元素</p><blockquote><p>构造方法</p></blockquote><ul><li><p>空参构造</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>这个没啥好说的…</p></li><li><p>有参构造</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">addAll</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numNew <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> pred<span class="token punctuation">,</span> succ<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        succ <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        pred <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        succ <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span> <span class="token class-name">E</span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        pred <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>succ <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        last <span class="token operator">=</span> pred<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> succ<span class="token punctuation">;</span>        succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> index <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>分析:</strong></p><ol><li>首先调用空参构造方法创建一个<code>LinkedList</code>对象</li><li>然后调用了<code>addAll()</code>方法,这里我们直接进到最底层开始分析,先通过<code>isPositionIndex(int index)</code>方法判断下标是否越界(因为是创建对象所以这里的<code>index</code>和<code>size</code>都是<code>0</code>)</li><li>判断完下标是否越界后,将参数<code>Collection</code>转换为数组并遍历,将数组中的元素作为节点按顺序连接起来</li><li>修改<code>LinkedList</code>的长度<code>size</code></li></ol></li></ul><blockquote><p>添加节点</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>分析:</strong></p><ol><li><p>先来分析<code>linkLast()</code>,先创建一个局部变量<code>l</code>作为最后一个节点</p></li><li><p>然后利用<code>Node</code>的有参构造将添加的元素作为节点创建出来,并连接上最后一个节点</p><p><img src="https://img.kandx.icu/img/20210629172335.png" alt="连接上一个节点"></p></li><li><p>将<code>LinkedList</code>最后一个节点<code>last</code>指向这个刚刚创建的节点</p></li><li><p>判断<code>LinkedList</code>的最后一个节点<code>l</code>是否为<code>null</code>:</p><ul><li>如果是就代表这是第一次添加节点,将新创建的节点作为<code>LinkedList</code>的首节点<code>first</code>;</li><li>如果不是将之前的最后一个节点和这个新创建的节点连接起来<code>l.next</code>;</li></ul></li><li><p>最后长度+1</p></li></ol><blockquote><p>删除节点</p></blockquote><ul><li><p>无参</p><p>删除第一个节点</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// assert f == first &amp;&amp; f != null;</span>    <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    f<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>    first <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        next<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    size<span class="token operator">--</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>分析:</strong></p><ol><li>先判断第一个节点是否为<code>null</code>如果是抛出<code>NoSuchElementException</code>异常</li><li>然后将节点内容和节点指向的下一个节点分别赋值给局部变量<code>item</code>和<code>next</code></li><li>将删除的节点的内容和下一个节点赋值为<code>null</code></li><li>因为删除的是第一个节点,所以下一个节点也就是第二个节点成了第一个节点</li><li>判断原来第二个节点是否为<code>null</code>:<ul><li>是,最后一个节点也为<code>null</code>这个<code>LinkedList</code>就是<code>null</code></li><li>否,这个节点作为首节点,上一个节点<code>prev</code>就是<code>null</code></li></ul></li><li>然后长度-1</li></ol></li><li><p>有参remove(int)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// assert isElementIndex(index);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">E</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// assert x != null;</span>    <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        last <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    x<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    size<span class="token operator">--</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>分析:</strong></p><ol><li><p>首先判断参数<code>index</code>是否越界</p></li><li><p>然后根据参数遍历出要删除的节点</p></li><li><p>将要删除的节点的内容,<code>prev</code>,<code>next</code>赋值给局部变量</p></li><li><p>判断<code>prev</code>是否为<code>null</code>:</p><ul><li><p>如果是那么要删除的节点就是首节点,将第二个节点设置为首节点</p></li><li><p>如果不是,那么将上一个节点的<code>next</code>指向下一个节点,要删除的节点的上一个节点设置为<code>null</code>:</p><p><img src="https://img.kandx.icu/img/20210629180835.png" alt="删除前"></p><p><img src="https://img.kandx.icu/img/20210629180927.png" alt="删除后"></p></li></ul></li><li><p>判断<code>next</code>是否为<code>null</code>:</p><ul><li>是,那么就代表要删除的节点是最后一个节点,则需要把倒数第二个节点设置为最后一个节点</li><li>否,那么将要删除的节点的下一个节点的<code>prev</code>指向要删除节点的<code>prev</code>(上一个节点),要删除的节点的<code>next</code>设置为<code>null</code></li></ul></li><li><p>要删除的节点的内容设置为<code>null</code></p></li><li><p>长度-1</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 小知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合之ArrayList</title>
      <link href="2021/06/26/Read-ArrayList/"/>
      <url>2021/06/26/Read-ArrayList/</url>
      
        <content type="html"><![CDATA[<h1>类结构</h1><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210627105617764.png" alt="ArrayList类关系图"></p><h1>源码分析</h1><blockquote><p>底层实现</p></blockquote><p><code>ArrayList</code>的底层存储结构是一个<code>Object[]</code>,也就是说<code>ArrayList</code>是对<strong>数组</strong>进行了封装,本质还是对数组进行操作.</p><blockquote><p>构造方法</p></blockquote><ul><li><p>空参构造</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请无视JDK1.8中这里的注释,他们忘记修改了 */</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>空参构造相对于1.7来说并不会直接创建一个容量为10的<code>Object[]</code>,而是一个<code>Object[]</code>对象,那么什么时候创建就在于我们什么时候操作<code>ArrayList</code>的<code>add()</code>.这样降低了内存的消耗</p></li><li><p>有参构造</p><ul><li><p>参数为<code>Collection</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            elementData <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// replace with empty array.</span>        elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>分析:</strong></p><ol><li>首先将<code>Collection</code>集合调用方法<code>toArray()</code>转换为<code>Object[]</code></li><li>判断数组的长度是否为<code>0</code>,如果为<code>0</code>那么就创建一个空的数组</li><li>如果不为<code>0</code>,判断这个<code>Collection</code>的类型是不是<code>ArrayList</code>,如果是直接将数组赋值给<code>ArrayList</code>的底层数组</li><li>如果不是将原本的数组内容<code>copy()</code>到<code>ArrayList</code>的底层数组中</li></ol></li><li><p>参数为<code>int</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                           initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>分析:</strong></p><ol><li>首先判断<code>initialCapacity</code>是否大于<code>0</code>,如果大于那么就创建一个指定大小的<code>Object[]</code></li><li>如果<code>initialCapacity</code>等于<code>0</code>,就创建一个空的<code>Object[]</code></li><li>否则就抛出非法参数异常<code>IllegalArgumentException</code></li></ol></li></ul></li></ul><blockquote><p>添加元素</p></blockquote><ul><li><p>add(E e)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>    elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// overflow-conscious code</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// overflow-conscious code</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>    elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>分析:</strong></p><ol><li>首先通过<code>calculateCapacity</code>方法判断当前<code>ArrayList</code>的数组是否是一个空的数组,如果是比较<code>(size + 1)</code>和 <code>DEFAULT_CAPACITY</code>哪个大取哪个作为数组的初始化长度</li><li>然后通过<code>ensureExplicitCapacity</code>方法判断<code>minCapacity</code>是否大于<code>ArrayList</code>的数组的长度,因为一开始是空的数组没有指定初始化大小和<code>minCapacity</code>也就是通过第一步得到的<code>10</code>相比肯定是需要扩容的<code>grow</code></li><li>扩容流程是:先扩容到原来长度的1.5倍,和 <code>minCapacity</code>比大小,因为原始大小是<code>0</code>所以还是比<code>minCapacity</code>小,然后就直接将<code>minCapacity</code>作为新的数组长度.在判断一下新的数组长度是否大于<code>MAX_ARRAY_SIZE</code>,如果大于就使用<code>Integer</code>的最大值作为数组长度.最后将原始数组的内容<code>copyOf</code>到新的数组中</li><li>综上,因为是第一次<code>add</code>操作所以数组的大小为<code>10</code></li></ol></li><li><p>add(int index, E e)</p><p>这个方法是在指定的下标位置插入元素(如果创建<code>ArrayList</code>时候没有指定初始化大小是不可以使用这个插入方法的)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                     size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>分析:</strong></p><ol><li>通过<code>rangeCheckForAdd</code>方法判断下标是否大于数组长度或者下标小于0</li><li>紧接着判断是否需要扩容</li><li>通过<code>System.arraycopy</code>(看不到源码)</li><li>将新的元素插入到指定下标</li><li>数组长度+1</li></ol></li></ul><blockquote><p>删除元素</p></blockquote><ul><li><p>根据下标删除</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                         numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// clear to let GC do its work</span>    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> size<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token class-name">E</span> <span class="token function">elementData</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>分析:</strong></p><ol><li>首先判断要删除的下标是否超过下标长度</li><li>然后获取到下标所对应的元素</li><li>根据<strong>数组长度 - 下标 - 1</strong>判断如果大于0那么就需要将下标之后的元素向前移动</li><li>最后将原来数组最后一个元素设置为<code>null</code></li></ol></li><li><p>根据元素删除</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>分析:</strong></p><ul><li>如果元素为<code>null</code>:遍历数组比较数组中看有没有元素为<code>null</code>如果有通过<code>fastRemove</code>删除元素</li><li>如果元素不为<code>null</code>:同样还是遍历数组比较元素中有没有和这个元素相等的,如果有<code>fastRemove</code>删除元素</li></ul></li></ul><blockquote><p>综上</p></blockquote><p><strong>如果使用<code>ArrayList</code>确定大小的话可以指定初始化数组长度,这样就减少了不断的扩容带来的内存消耗</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 小知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Centos7可视化页面</title>
      <link href="2021/06/15/install-centos-window/"/>
      <url>2021/06/15/install-centos-window/</url>
      
        <content type="html"><![CDATA[<h1>准备工作</h1><ul><li><p>检查一下服务器是否有外网</p><p>命令: <code>ping www.baidu.com</code></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615102248516.png" alt="检查服务器网络"></p></li><li><p>yum命令是否可用</p><p>命令: <code>yum --version</code></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615102518478.png" alt="yum版本信息"></p></li></ul><h1>开始安装</h1><blockquote><p>安装可视化系统</p></blockquote><p>命令: <code>yum groupinstall -y &quot;X Window System&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615103238948.png" alt="安装完成"></p><blockquote><p>检查是否安装成功</p></blockquote><p>命令: <code>yum grouplist</code></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615103648470.png" alt="检查是否安装"></p><blockquote><p>安装GNOME</p></blockquote><p>命令: <code>yum groupinstall -y &quot;GNOME Desktop&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615104412184.png" alt="安装GNOME"></p><blockquote><p>设置默认启动可视化页面</p></blockquote><ul><li><p>检查当前模式</p><p>命令: <code>systemctl get-default</code></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615104549532.png" alt="检查当前模式"></p></li><li><p>修改启动模式为图形化页面</p><p>命令: <code>systemctl set-default graphical.target</code></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615104723741.png" alt="修改启动模式为图形化页面"></p><p>重启服务器查看效果</p></li></ul><h1>可视化页面配置</h1><ul><li><p>语言配置</p><p>珍爱生命,远离中文</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615105132584.png" alt="语言配置"></p></li><li><p>键盘配置</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615105258584.png" alt="键盘配置"></p></li><li><p>隐私配置</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615105514311.png" alt="默认即可"></p></li><li><p>时区配置</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615105553786.png" alt="根据需要配置时区"></p></li><li><p>在线账号(跳过即可)</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615105654858.png" alt="跳过"></p></li><li><p>账号</p><p>我这里直接输入<code>root</code></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615105756048.png" alt="账号"></p></li><li><p>设置密码</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615105838175.png" alt="设置密码"></p></li><li><p>设置完成,开始使用</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210615105910537.png" alt="设置完成"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty使用@Autowried注解</title>
      <link href="2021/06/07/netty-bug01/"/>
      <url>2021/06/07/netty-bug01/</url>
      
        <content type="html"><![CDATA[<h1>背景</h1><p>项目需要和物流门进行交互所以采用了<strong>netty</strong>框架作为TCP连接,但是在使用的过程中注入<code>bean</code>却是个<code>null</code>,在此记录下防止后面踩坑</p><h1>解决</h1><ol><li><p>创建一个静态类成员变量</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">NettyClientHandler</span> nettyClientHandler<span class="token punctuation">;</span></code></pre><p><strong>解释:</strong> 这里的<code>NettyClientHandler</code>就是你自定义的Netty事件处理类(Handler)</p></li><li><p>注入的bean类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">DoorDao</span> doorDao<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">WmsToWcsBusiness</span> wmsToWcsBusiness<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">NettyClient</span> nettyClient<span class="token punctuation">;</span></code></pre><p>这里的注入正常注入就行,不需要做特殊处理</p></li><li><p>将自定义的<code>Handler</code>交给Spring容器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    nettyClientHandler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><mark class="hl-label EE5规范中加入的，在Servlet生命周期中有一定作用，它通常都是一些初始化的操作，但初始化可能依赖于注入的其他组件，所以要等依赖全部加载完再执行。">这里最关键的就是@PostConstruct注解,此注解是在Java</mark> </li><li><p>使用注入的bean类</p><p>需要通过第一步的那个静态成员变量使用,如下:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DoorDO</span> doorDO <span class="token operator">=</span> nettyClientHandler<span class="token punctuation">.</span>doorDao<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DoorDO</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"door_ip"</span><span class="token punctuation">,</span> currentIp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h1>注意点</h1><ul><li>通过<code>debug</code>模式查看注入的类依旧是null,但是使用的时候通过静态成员变量已经完成注入了,所以不要在意上面的null</li><li>之所以为空是因为,netty并没有交给spring管理注入,所以使用<code>@PostConstruct</code>让spring去管理他完成依赖</li></ul>]]></content>
      
      
      <categories>
          
          <category> netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netty </tag>
            
            <tag> 踩坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB无法启动</title>
      <link href="2021/06/02/resolve-mongod-error/"/>
      <url>2021/06/02/resolve-mongod-error/</url>
      
        <content type="html"><![CDATA[<h1>问题重现</h1><p>启动项目发现MongoDB连接不上,第一反应是感觉数据库的服务挂了,连接服务器使用命令查看MongoDB服务</p><pre class="language-shell" data-language="shell"><code class="language-shell">systemctl status mongod</code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210602110059327.png" alt="mongo服务挂了"></p><p>尝试手动重启:</p><pre class="language-shell" data-language="shell"><code class="language-shell">systemctl restart mongod</code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210602110429545.png" alt="手动重启报错"></p><p>根据提示查看原因</p><pre class="language-shell" data-language="shell"><code class="language-shell">systemctl status mongod</code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210602110545256.png" alt="错误状态"></p><p>发现报了一句: <code> mongod.service: control process exited, code=exited status=14</code></p><h1>解决方法</h1><h2 id="查看用户权限">查看用户权限</h2><blockquote><p>首先先要查看 mongodb 的用户权限</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">cd &#x2F;var&#x2F;lib&#x2F;mongodbll</code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210602111002388.png" alt="mongodb的权限"></p><p>只要用户和用户组不是<code>mongod</code> 的统一修改一下</p><pre class="language-shell" data-language="shell"><code class="language-shell">chown -R mongod:mongod &#x2F;var&#x2F;lib&#x2F;mongodb</code></pre><mark class="hl-label pink">解释:mongod是mongo服务的用户,每个人的可能不一样根据自己的来</mark> <blockquote><p>最后查看一下mongodb-27017.sock的用户权限</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">cd &#x2F;tmp&#x2F;ll</code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210602111505131.png" alt="权限查看"></p><p>我的是因为这里不是<code>mongod</code> 而导致服务无法正常启动,修改之后即可</p><pre class="language-shell" data-language="shell"><code class="language-shell">chown mongod:mongod &#x2F;tmp&#x2F;mongodb-27017.sock</code></pre><blockquote><p>重启MongoDB服务</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">systemctl restart mongod</code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210602111715632.png" alt="启动成功"></p><p>至此问题已经解决,问题解决思路<a href="https://askubuntu.com/questions/823288/mongodb-loads-but-breaks-returning-status-14">参考</a></p><h3 id="一言">一言</h3><blockquote><p>世人慌慌张张，不过图碎银几两。</p><p>偏偏这碎银几两，能解世间万种慌张。</p><p>​--GAI(空城计)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty解码器</title>
      <link href="2021/06/02/netty-encoder/"/>
      <url>2021/06/02/netty-encoder/</url>
      
        <content type="html"><![CDATA[<h3 id="引入依赖">引入依赖</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- netty 依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.42.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="编写客户端">编写客户端</h3><p>因为项目是作为客户端的所以这里只写客户端了</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClient</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NettyProperties</span> nettyProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NettyServerInitializer</span> nettyServerInitializer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nettyClientStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">EventLoopGroup</span> clientGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bootstrap</span> clientBootStrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            clientBootStrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>clientGroup<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>nettyServerInitializer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ChannelFuture</span> channelFuture <span class="token operator">=</span> clientBootStrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>nettyProperties<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nettyProperties<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>channelFuture<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"连接服务端成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"连接服务端失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            clientGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="netty初始化类">netty初始化类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ChannelHandler.Sharable</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NettyServerHandler</span> nettyServerHandler<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">NettyEncoder</span> nettyEncoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ChannelPipeline</span> pipeline <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用自定义的编码器</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nettyEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nettyServerHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="编写编码器">编写编码器</h3><mark class="hl-label red">注意:这里是编码器的核心代码</mark> <pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ChannelHandler.Sharable</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyEncoder</span> <span class="token keyword">extends</span> <span class="token class-name">MessageToByteEncoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> channelHandlerContext<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> byteBuf<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> channelHandlerContext<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将字符串转换为16进制发送给服务端</span>        channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token class-name">HexBinaryUtil</span><span class="token punctuation">.</span><span class="token function">hexStringToByteArray</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="事件处理类">事件处理类</h3><p>我这里是读取完消息直接反馈给服务端数据包,没有做任何业务处理</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ByteBuf</span> byteBuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>byteBuf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    byteBuf<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> clientMsg <span class="token operator">=</span> <span class="token class-name">HexBinaryUtil</span><span class="token punctuation">.</span><span class="token function">bytesToString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"收到 ip = &#123;&#125; 发来的消息 msg = &#123;&#125;"</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Channel</span> channel <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送消息: "11050000ff008eaa"</span>    <span class="token class-name">ChannelFuture</span> channelFuture <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token class-name">ElevatorCommand</span><span class="token punctuation">.</span>CLOSE_STEP_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    channelFuture<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> channelFuture<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>channelFuture<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>channelFuture<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"================== 发送完成 ======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"================== 发送失败 ======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="测试">测试</h3><ol><li><p>首先服务端先发送一个16进制的数据包,触发客户端读事件</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210602093633072.png" alt="服务端发送数据"></p></li><li><p>客户端接收到消息反馈给服务端</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210602093750322.png" alt="收到服务端消息"></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210602093822577.png" alt="反馈给服务端"></p><h3 id="使用到的两个进制转换方法">使用到的两个进制转换方法</h3><blockquote><p>16进制字符串转换为16进制</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">hexStringToByteArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> hexString<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hexString <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> hexString<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    hexString <span class="token operator">=</span> hexString<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> hexString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hexChars <span class="token operator">=</span> hexString<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pos <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">charToByte</span><span class="token punctuation">(</span>hexChars<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token function">charToByte</span><span class="token punctuation">(</span>hexChars<span class="token punctuation">[</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>byte数组转换为16进制字符串</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">bytesToString</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuffer</span> sBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo多台终端同步更新</title>
      <link href="2021/05/31/hexo-synchronization/"/>
      <url>2021/05/31/hexo-synchronization/</url>
      
        <content type="html"><![CDATA[<h1>创建私有仓库</h1><p>默认已经拥有GitHub账号</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210531103734694.png" alt="创建私有仓库"></p><ul><li>仓库名称随意只要不合之前的仓库名称重复即可</li><li>仓库类型建议选择私有的,如果你想公开的话也可以</li><li>然后点击<strong>Create repository</strong> 创建即可</li></ul><h1>建立本地git仓库</h1><blockquote><p>首先删除主题.git文件</p></blockquote><p>这里我用的是Jerry大佬的<strong>butterfly</strong>主题,其它主题的.git文件路径与之类似</p><p>在<code>E:\software\workspace\blog\themes\butterfly</code> 找到一个名为 <code>.git</code> 的文件删除即可,如果你是Linux系统的话执行这个命令:</p><pre class="language-shell" data-language="shell"><code class="language-shell">rm -rm $&#123;你的主题路径&#125;&#x2F;.git</code></pre><blockquote><p>初始化本地仓库</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">git init</code></pre><p>初始化成功后我们可以看到根目录多了一个<code>.git</code>的文件</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210531104551010.png" alt="初始化本地仓库"></p><blockquote><p>查看.gitignore文件</p></blockquote><p>文件内容为:</p><pre class="language-none"><code class="language-none">.DS_StoreThumbs.dbdb.json*.lognode_modules&#x2F;public&#x2F;.deploy*&#x2F;</code></pre><p>如果没有见添加,没有这个文件就手动创建</p><h1>本地仓库推送到云端</h1><blockquote><p>添加私有仓库地址</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">git remote add origin $&#123;私有仓库地址&#125;</code></pre><blockquote><p>将所有文件添加到缓存中</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">git add .</code></pre><blockquote><p>将暂存区的文件提交到当前分支</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">git commit -m &quot;$&#123;提交信息备注&#125;&quot;</code></pre><blockquote><p>将当前分支修改内容提交到远程私有仓库</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">git push -u origin master</code></pre><p>至此,已经完成将本地博客配置以及文章完全备份到私有仓库中</p><h1>在另一台终端进行hexo写作</h1><p>默认另一台电脑已经有了<strong>nodejs,hexo,git</strong>的环境</p><blockquote><p>clone私有仓库代码</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">git clone $&#123;私有仓库地址&#125;</code></pre><p>克隆完成后hexo的配置文章等已经保存到了本地</p><blockquote><p>hexo的npm依赖安装</p></blockquote><p><strong>注意:<strong>这里千万不要使用</strong>hexo init</strong>命令,如果使用了这个文件夹就已经和私有仓库断开链接了,直接安装依赖即可</p><pre class="language-shell" data-language="shell"><code class="language-shell">npm install</code></pre><blockquote><p>hexo文件生成和服务开启</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">hexo ghexo s</code></pre><p>查看<code>http://$&#123;ip&#125;:4000</code>博客是否有问题.如果没有问题的话,就代表hexo迁移成功</p><h1>hexo同步</h1><p>当在一台电脑上更新完博客后,使用命令将更新的内容同步到私有仓库,这样另一台电脑直接拉取就可以保持同步更新了</p><pre class="language-shell" data-language="shell"><code class="language-shell"># 把新建的文件放到暂缓区git add .# 将暂缓区内容提交到当前本地分支git commit -m &quot;$&#123;提交信息备注&#125;&quot;# 先拉去私有仓库,看看有没有新的内容git pull origin master# 如果有冲突根据提示进行修改即可# 拉取完成后,把本地更新内容提交到私有仓库git push -u origin master</code></pre><p>另一台电脑写文章之前只需要<code>pull</code>私有仓库更新内容就可以了,到这里多台终端同布更新博客已经部署完成.</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NACOS使用</title>
      <link href="2021/05/28/use-nacos/"/>
      <url>2021/05/28/use-nacos/</url>
      
        <content type="html"><![CDATA[<h1>什么是Nacos?</h1><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。(来自于<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">官方文档</a>解释)</p><h1>快速开始</h1><h2 id="版本选择">版本选择</h2><p>根据官方的建议选择<a href="https://github.com/alibaba/nacos/releases">1.4.2</a>或者<a href="https://github.com/alibaba/nacos/releases">2.0.1</a>的稳定版本</p><h2 id="环境准备">环境准备</h2><ul><li>64位的操作系统</li><li>64位的<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">JDK1.8</a>版本以上</li><li><a href="https://maven.apache.org/download.cgi">Maven3.2</a>版本以上</li></ul><h2 id="下载Nacos服务包">下载Nacos服务包</h2><p>从上面的链接选择下载最新的稳定版本</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528105107755.png" alt="2.0.1版本"></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528105136761.png" alt="1.4.2版本"></p><p>分别解压到服务器或者电脑上,我这里选择的是服务器</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528105312562.png" alt="解压后进入文件夹"></p><h2 id="启动Nacos服务">启动Nacos服务</h2><ul><li><h3 id="Linux-Unix-Mac">Linux/Unix/Mac</h3><pre class="language-shell" data-language="shell"><code class="language-shell"># 启动命令(standalone表示单机模式运行)sh startup.sh -m standalone</code></pre><p>如果是Ubuntu系统或者运行脚本报错提示<code>符号找不到</code>,可以尝试如下运行:</p><pre class="language-shell" data-language="shell"><code class="language-shell">bash startup.sh -m standalone</code></pre></li><li><h3 id="Windows">Windows</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 启动命令(standalone表示单机模式运行)</span>startup<span class="token punctuation">.</span>cmd <span class="token operator">-</span>m standalone</code></pre></li></ul><h2 id="关闭服务">关闭服务</h2><ul><li><p>Linux/Unix/Mac</p><pre class="language-shell" data-language="shell"><code class="language-shell">sh shutdown.sh</code></pre></li><li><p>Windows</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">shutdown<span class="token punctuation">.</span>cmd<span class="token comment"># 或者双击shutdown.cmd</span></code></pre></li></ul><h1>整合SpringBoot</h1><h2 id="配置管理">配置管理</h2><ol><li><p>添加依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 这里建议添加一个com.alibaba.cloud的版本管理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 配置中心依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>注意:</strong> 选择的版本依赖对应可以参照<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">官网</a>给出的推荐:</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528111516198.png" alt="spring-cloud-alibaba版本号推荐"></p></li><li><p>在配置文件<code>/src/main/resources/bootstrap.properties</code>中配置服务地址</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">$&#123;当前springboot的名称&#125;</span><span class="token attr-name">spring.cloud.nacos.config.server-addr</span><span class="token punctuation">=</span><span class="token attr-value">$&#123;Nacos服务地址&#125;</span></code></pre></li><li><p>在用到配置文件值的类上面添加注解 <code>@RefreshScope</code></p><p>当通过Nacos修改发布新的配置文件的时候这个注解会实时刷新获取修改的内容</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528113356136.png" alt="未修改前"><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528113456801.png" alt="image-20210528113456801"><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528113323522.png" alt="测试Nacos配置中心"></p></li><li><p>在Nacos服务可视化页面添加一个配置文件</p><p>页面地址: <code>$&#123;Nacos服务地址+8848/nacos&#125;</code></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528113725333.png" alt="Nacos可视化页面"></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528114035468.png" alt="新建配置"></p><p>解释:</p><ul><li>Data ID: 应用名+properties</li><li>Group: 组名可以使用默认的</li><li>配置格式: 因为我写的是<code>bootstrap.properties</code> 所以就选择了 <code>Properties</code></li></ul><p>发布一下这个配置:</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528114404785.png" alt="配置发布"></p></li><li><p>重启Springboot</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528122417550.png" alt="修改后"></p><p>通过Nacos再次修改配置文件并保存发布</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528122513601.png" alt="Nacos配置文件"><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528122627110.png" alt="修改后"></p><p>以上就是Nacos的作为配置中心的简单demo使用.</p></li></ol><h3 id="配置中心的一些其它细节">配置中心的一些其它细节</h3><h4 id="命名空间">命名空间</h4><p>默认的命名空间是: public,用来做<strong>配置隔离</strong></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528135737766.png" alt="默认的命名空间"></p><p>例如开发环境隔离: <code>dev</code> , <code>test</code> , <code>prod</code> 环境等</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528140129950.png" alt="自定义命名空间"></p><p>在 <code>/src/main/resources/bootstrap.properties</code> 指明使用哪个命名空间的配置</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528140649523.png" alt="命名空间ID"><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528140617391.png" alt="指明使用哪个命名空间的配置"></p><p>这样的话,如果两个命名空间都有同样名称的配置集(Data ID),可以通过命名空间的ID来区分使用哪一个空间下的配置</p><h4 id="配置集">配置集</h4><p>所有配置项统称为配置集</p><h4 id="配置集ID">配置集ID</h4><p>类似于配置文件名称(Data ID)</p><h4 id="配置分组">配置分组</h4><p>默认所有的配置集都属于: <code>DEFAULT_GROUP</code></p><p>例如一个命名空间下有多个配置文件但是我们可以指定不同的组来实现使用不同的配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528141959857.png" alt="不同的组"></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528142104731.png" alt="指定使用哪个组的配置"></p><h4 id="使用多个配置集">使用多个配置集</h4><p>在大型项目中配置文件的内容可能十分庞大,这时就需要我们根据类型把配置文件进行拆分</p><p>例如我这里把配置问价拆分了几个部分:</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528143432232.png" alt="拆分配置文件"></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528144138721.png" alt="使用多个配置集"></p><h2 id="注册中心">注册中心</h2><ol><li><p>引用pom依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 这里建议添加一个com.alibaba.cloud的版本管理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 注册中心依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>指定注册中心的地址</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>Nacos服务地址<span class="token punctuation">&#125;</span>        <span class="token key atrule">service</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>应用名<span class="token punctuation">&#125;</span></code></pre></li><li><p>使用注解开启服务的注册与发现<code>@EnableDiscoveryClient</code></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528150223468.png" alt="开启服务的注册与发现"></p></li><li><p>在可视化页面查看是否注册成功</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528150344586.png" alt="注册成功"></p></li></ol><h3 id="使用Feign进行服务的远程调用">使用Feign进行服务的远程调用</h3><ol><li><p>引入pom依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>书写调用接口</p><p>在调用方创建一个feign包,写上需要调用的服务名以及接口</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528151849669.png" alt="需要调用的远程接口"></p><ul><li>@FeignClient: 被调用的服务在注册中心注册的服务名</li><li>接口路径与被调用的保持一致</li></ul></li><li><p>开启远程调用</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528152239383.png" alt="使用注解开启远程调用"></p><p>这就是为什么要把需要远程调用的接口都写在一个包下</p></li><li><p>模拟测试</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528152715264.png" alt="注册的服务"></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210528152651690.png" alt="远程调用的结果"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo迁移</title>
      <link href="2021/05/27/move-hexo/"/>
      <url>2021/05/27/move-hexo/</url>
      
        <content type="html"><![CDATA[<h1>开始前准备</h1><ol><li><p>检查电脑或者服务器是否已经安装了 <code>git</code> 和 <code>nodejs</code> ,检查方法如下</p><blockquote><p>检查git是否安装</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527155241308.png" alt="检查git是否安装"></p><blockquote><p>检查nodejs是否安装</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527155328259.png" alt="检查node"></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527155351072.png" alt="检查npm"></p></li><li><p>一些需要拷贝到新电脑的hexo文件</p><ul><li>hexo的配置文件: <code>_config.yml</code></li><li>主题文件夹: <code>theme</code></li><li>原始文件: <code>source</code></li><li>文件的模板: <code>scaffolds</code></li><li>使用了那些依赖包: <code>package.json</code></li><li>提交需要忽略那些文件: <code>.gitignore</code></li></ul></li></ol><h1>开始迁移</h1><h3 id="全局安装hexo">全局安装hexo</h3><pre class="language-shell" data-language="shell"><code class="language-shell">npm install hexo-cli -g</code></pre><h3 id="检查hexo是否安装成功">检查hexo是否安装成功</h3><pre class="language-shell" data-language="shell"><code class="language-shell">hexo -v</code></pre><p><strong>注意:</strong> 上面这个命令需要在 <strong>git</strong> 可视化窗口(git bash here)中运行</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527160737580.png" alt="检查hexo是否安装成功"></p><p><strong>如果出现了 <code>hexo command not found</code> ,大概率是当前电脑环境没有找到hexo,修改电脑环境的<code>path</code>即可.</strong></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527161123272.png" alt="npm安装hexo的路径"></p><h3 id="把刚才拷贝的文件放到新的文件夹中-然后安装依赖">把刚才拷贝的文件放到新的文件夹中,然后安装依赖</h3><pre class="language-shell" data-language="shell"><code class="language-shell">npm install</code></pre><h3 id="安装一些其它必要的组件">安装一些其它必要的组件</h3><pre class="language-shell" data-language="shell"><code class="language-shell"># 将hexo生成的文件可以使用git提交npm install hexo-deployer-git --save# 生成网站地图npm install hexo-generator-sitemap --save</code></pre><h3 id="本地测试是否安装成功">本地测试是否安装成功</h3><pre class="language-shell" data-language="shell"><code class="language-shell">hexo cleanhexo ghexo s</code></pre><p>如果以上三个命令均不报错,并且可以使用 <code>http://localhost:4000</code> 预览博客,那么就说明迁移成功</p><h1>部署到GitHub上</h1><p>默认你拥有GitHub账号</p><h3 id="创建仓库">创建仓库</h3><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527162542441.png" alt="创建仓库"></p><p><strong>注意:</strong> 如果你的用户名称是 <code>A</code> 那么仓库名称就是 <code>A.github.io</code>,一定是<strong><a href="http://xn--eqr924avxo.github.io">用户名.github.io</a></strong></p><h3 id="选择一个主题">选择一个主题</h3><p>在仓库页面,选择 <code>setting</code> ,找到左侧导航栏的 <code>Pages</code>, 最后点击 <code>Choose a theme</code> 随便选择一个主题即可</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527163011002.png" alt="点击setting"></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527163257999.png" alt="选择pages"></p><h3 id="连接GitHub和你的本地">连接GitHub和你的本地</h3><ol><li><p>打开 <strong>Git Bash Here</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">git config --global user.name &quot;Name&quot;git config --global user.email &quot;Email&quot;</code></pre><p><code>Name</code> 和 <code>Email</code> 是Github上的</p></li><li><p>生成SSH秘钥</p><pre class="language-shell" data-language="shell"><code class="language-shell">ssh-keygen -t rsa -C &quot;Email&quot;</code></pre><p>根据提示敲3个回车,然后查看生成的秘钥一般都在 <strong>.ssh/id_rsa.pub</strong> 里面形如下面这样:</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527165319993.png" alt="生成的文件"></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527165423761.png" alt="秘钥"></p><ol start="3"><li><p>把生成的秘钥写到GitHub中</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527165739115.png" alt="选择setting"></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527165806357.png" alt="选择SSH and GPG keys"></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527170004061.png" alt="新建密匙"></p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527170031494.png" alt="填写key"></p></li><li><p>验证是否添加成功</p><pre class="language-shell" data-language="shell"><code class="language-shell">ssh -T git@github.com</code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527170224852.png" alt="出现这样即可"></p><ol start="5"><li><p>修改hexo的**_config.yml** 文件</p><ul><li>type: 写 git</li><li>repository: 写仓库ssh地址</li><li>branch: 分支写master</li></ul><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527170607361.png" alt="_config.yml配置git"></p></li><li><p>提交文章到GitHub</p><pre class="language-shell" data-language="shell"><code class="language-shell">hexo d -m &quot;提交原因&quot;</code></pre></li></ol></li></ol><h1>配置个性化域名</h1><p>默认你已经拥有了域名</p><ol><li><p>打开刚才配置 <code>pages</code> 的页面,将你拥有的域名配置到<strong>Custom domain</strong> 里然后点击保存</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527171008149.png" alt="配置购买的域名"></p></li><li><p>在域名购买商解析博客地址</p><p>我的是在<a href="https://dns.console.aliyun.com/?spm=5176.12818093.favorite.ddns.1c3616d00iAmiH#/dns/setting/kandx.icu">阿里云</a>买的,就只展示阿里云的域名解析</p><ul><li><p>打开域名解析(DNS)</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527172011752.png" alt="解析域名"></p></li><li><p>将仓库地址写到解析记录里</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527172147158.png" alt="填写仓库地址"></p></li></ul><p><strong>主机记录一个是 <code>www</code> 一个是 <code>@</code> 两个都是 <code>CNAME</code> 的记录类型</strong></p></li><li><p>返回查看GitHub解析</p><p>如果是下面这样就是解析成功了</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210527172340210.png" alt="解析成功"></p></li><li><p>访问一下购买的域名查看效果</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/20210527172842.png" alt="成功"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 图床 </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器自启jar包</title>
      <link href="2021/05/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%90%AFjar%E5%8C%85/"/>
      <url>2021/05/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%90%AFjar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1>准备环境</h1><ul><li>jdk (需要配置好全局环境变量)</li><li>需要自启的服务</li></ul><h1>配置自启</h1><h3 id="1-编写一个-shell-脚本-如我需要开机启动一个-jar-包">1. 编写一个 shell 脚本,如我需要开机启动一个 jar 包:</h3><pre class="language-shell" data-language="shell"><code class="language-shell">nohup java -jar -Dspring.config.location&#x3D;.&#x2F;conf&#x2F; -Dspring.config.name&#x3D;application sso-2.4.0-SNAPSHOT.jar &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</code></pre><h3 id="2-给这个脚本增加可执行的权限">2. 给这个脚本增加可执行的权限</h3><pre class="language-shell" data-language="shell"><code class="language-shell">chmod +x $&#123;脚本名称&#125;</code></pre><h3 id="3-为-etc-rc-d-rc-local-增加可执行权限">3. 为 <code>/etc/rc.d/rc.local </code> 增加可执行权限</h3><pre class="language-shell" data-language="shell"><code class="language-shell">chmod +x &#x2F;etc&#x2F;rc.d&#x2F;rc.local</code></pre><h3 id="4-在-rc-local-里面编写需要开机自启的服务">4. 在 <code>rc.local</code> 里面编写需要开机自启的服务</h3><pre class="language-shell" data-language="shell"><code class="language-shell">cd $&#123;第一步编写脚本的绝对路径&#125;.&#x2F;$&#123;脚本名称&#125;</code></pre><h3 id="5-重启服务器后查看效果">5. 重启服务器后查看效果</h3><pre class="language-shell" data-language="shell"><code class="language-shell"># 因为我的是 jar 包所以直接搜索 javaps -ef | grep java</code></pre><h1>注意事项</h1><ul><li><p>如果服务没有启动成功可以将编写脚本的启动日志保存到文件中方便查看</p><pre class="language-shell" data-language="shell"><code class="language-shell"># 输出日志文件的路径exec 2&gt; &#x2F;home&#x2F;admin&#x2F;download&#x2F;start.logexec 1&gt;&amp;2set -x# 脚本路径&#x2F;home&#x2F;admin&#x2F;download&#x2F;startAll.sh startexit 0</code></pre></li><li><p>如果自启的 Jar 包没有成功,并且启动日志是这个错误  <code>nohup: failed to run command 'java': No such file or directory </code> ,在 <code>rc.local</code> 文件里面启动命令之前添加这样一句话:</p><pre class="language-shell" data-language="shell"><code class="language-shell">source &#x2F;etc&#x2F;profile</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitMQ安装</title>
      <link href="2021/04/28/rabbitMQ%E5%AE%89%E8%A3%85/"/>
      <url>2021/04/28/rabbitMQ%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1>准备工作</h1><ul><li>一台服务器或者虚拟机</li><li><a href="https://github.com/rabbitmq/erlang-rpm/releases/download/v23.1.4/erlang-23.1.4-1.el7.x86_64.rpm">下载erlang</a></li><li><a href="https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.8.9/rabbitmq-server-3.8.9-1.el7.noarch.rpm">下载rabbitmq</a></li></ul><p><strong>注意:</strong> 本文所用的版本为 <strong>erlang-v23.1.4</strong> 和 <strong>rabbitmq-server-3.8.9</strong> ,请注意rabbitmq和erlang版本对应关系,具体可以参考<a href="https://www.rabbitmq.com/which-erlang.html">官网</a></p><h1>安装</h1><h3 id="1-将-erlang-和-rabbitmq-上传到服务器或者虚拟上">1. 将 erlang 和 rabbitmq 上传到服务器或者虚拟上</h3><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210428103247316.png" alt="image-20210428103247316"></p><h3 id="2-首先使用命令安装-erlang">2. 首先使用命令安装 erlang</h3><pre class="language-shell" data-language="shell"><code class="language-shell">yum -y install erlang-23.1.4-1.el7.x86_64.rpm</code></pre><h3 id="3-使用命令查看-erlang-是否安装成功">3. 使用命令查看 erlang 是否安装成功</h3><pre class="language-shell" data-language="shell"><code class="language-shell">erl -v</code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210428103642374.png" alt="image-20210428103642374"></p><h3 id="3-erlang-提示安装成功后-安装-rabbitmq">3. erlang 提示安装成功后,安装 rabbitmq</h3><pre class="language-shell" data-language="shell"><code class="language-shell">yum -y install rabbitmq-server-3.8.9-1.el7.noarch.rpm</code></pre><h3 id="4-启动-rabbitmq-服务">4. 启动 rabbitmq 服务</h3><pre class="language-shell" data-language="shell"><code class="language-shell">systemctl start rabbitmq-server</code></pre><p><strong>注意:</strong>  首次启动可能有点慢,等一下即可</p><blockquote><p>关于 rabbitmq 服务一些基础命令</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F; 开启 rabbitmq 服务systemctl start rabbitmq-server&#x2F;&#x2F; 查看 rabbitmq 服务状态systemctl status rabbitmq-server&#x2F;&#x2F; 停止 rabbitmq 服务systemctl stop rabbitmq-server&#x2F;&#x2F; 设置开机启动 rabbitmq 服务systemctl enable rabbitmq-server&#x2F;&#x2F; 设置开机不启动 rabbitmq 服务systemctl disable rabbitmq-server</code></pre><h1>安装web页面插件</h1><pre class="language-shell" data-language="shell"><code class="language-shell">rabbitmq-plugins enable rabbitmq_management</code></pre><p><strong>注意:</strong>  rabbitmq 有一个默认的账号密码: <code>guest</code> 但是默认情况下只能在 localhost 本机下访问,所以需要添加一个可以远程登录的账户. 另外,安装完之后需要重启一下 rabbitmq 服务,如果是服务器记得开放端口 <code>15672</code> ,如果是本地虚拟机则直接将防火墙关闭即可.</p><blockquote><p>在浏览器使用 ip + 端口 打开 web 管理页面</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210428105322802.png" alt="image-20210428105322802"></p><blockquote><p>如果使用 guest 用户登录会有如下提示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210428105452033.png" alt="image-20210428105452033"></p><blockquote><p>创建一个可以远程登录用户</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F; 新增用户rabbitmqctl add_user admin admin</code></pre><blockquote><p>设置用户分配操作权限</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F; 设置 admin 用户角色是管理员rabbitmqctl set_user_tags admin administrator</code></pre><p><strong>角色说明:</strong></p><ul><li>none:<ul><li>不能进入 web 管理页面 ,只能发送和接受消息</li></ul></li><li>management:<ul><li>用户可以通过 AMQP 做任何事</li><li>列出自己可以通过 AMQP 登入的 virtual hosts</li><li>查看自己的 <code>virtual hosts</code> 中的 <code>queues, exchanges, bindings</code></li><li>查看和关闭自己的 <code>channels</code> 和 <code>connections</code></li><li>查看有关自己的 <code>virtual hosts</code> 的全局的统计信息,包含其他用户在这些 <code>virtual hosts</code> 中的活动</li></ul></li><li>policymaker:<ul><li>可以做 management 做的事</li><li>查看,创建,删除自己的 <code>virtual hosts</code> 所属的 <code>policies</code> 和 <code>parameters</code></li></ul></li><li>monitoring:<ul><li>可以做 management 做的事</li><li>列出所有的 <code>virtual hosts</code> ,包括自己不能登录的</li><li>查看其他用户的 <code>connections</code> 和 <code>channels</code></li><li>查看节点级别的数据, 如 <code>clustering</code> 和 <code>memory</code> 使用情况</li><li>查看真正的关于所有 <code>virtual hosts</code> 的全局统计信息</li></ul></li><li>administrator<ul><li>可以做 policymaker 和 monitoring 事</li><li>创建和删除 <code>virtual hosts</code></li><li>查看,创建,删除 <code>users</code></li><li>查看,创建,删除 <code>permissions</code></li><li>关闭其他用户的 <code>connections</code></li></ul></li></ul><blockquote><p>为用户添加资源权限</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">rabbitmqctl set_permissions -p &#x2F; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></pre><blockquote><p>然后使用 admin 用户登录 web 管理页面</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210428113149245.png" alt="image-20210428113149245"></p><h1>rabbitmq 常用命令</h1><pre class="language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F; 新增用户rabbitmqctl add_user $&#123;账号&#125; $&#123;密码&#125;&#x2F;&#x2F; 为指定的用户赋予角色rabbitmqctl set_user_tags $&#123;账号&#125; $&#123;角色&#125;&#x2F;&#x2F; 为指定用户修改密码rabbitmqctl change_password $&#123;账号&#125; $&#123;新密码&#125;&#x2F;&#x2F; 删除用户rabbitmqctl delete_user $&#123;账号&#125;&#x2F;&#x2F; 查看所有用户rabbitmqctl list_users&#x2F;&#x2F; 为指定用户设置资源权限rabbitmqctl set_permissions -p &#x2F; $&#123;账号&#125; &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> rabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遍历Map</title>
      <link href="2021/04/07/map/"/>
      <url>2021/04/07/map/</url>
      
        <content type="html"><![CDATA[<h1>Java 遍历 Map 的 5 种方式</h1><h2 id="1-通过-keySet-或者-values-方法遍历">1. 通过 keySet() 或者 values() 方法遍历</h2><blockquote><p>如果只需要获取 Map 的 key 或者 value，通过 Map 的 <code>keySet()</code> 或 <code>values()</code> 方法是最直接的</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span> <span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span> <span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> value <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210406192303810.png" alt="image-20210406192303810"></p><h2 id="2-通过-keySet-的-get-key-获取值">2. 通过 keySet() 的 get(key) 获取值</h2><blockquote><p>如果需要同时获取 key 和 value, 可以通过先获取 key, 然后再通过 Map 的 <code>get(key)</code> 获取对应的 value</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span> <span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span> <span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key: "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">" value: "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210406192953493.png" alt="image-20210406192953493"></p><p><strong>tips: 这个方法不是最优选择一般不推荐使用。</strong></p><h2 id="3-通过-entrySet-遍历">3. 通过 entrySet() 遍历</h2><blockquote><p>通过对 Map 的 <code>entrySet()</code> 进行遍历，可以同时拿到 key 和 value，大多数情况下要优于第二种方法</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span> <span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span> <span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> mapData <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key: "</span> <span class="token operator">+</span> mapData<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" value: "</span> <span class="token operator">+</span> mapData<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210406194052188.png" alt="image-20210406194052188"></p><h2 id="4-通过迭代器-Iterator-遍历">4. 通过迭代器 Iterator 遍历</h2><blockquote><p>上面的几种遍历方法都用到了增强 for 循环 —— foreach, 但是有一个劣势：遍历 Map 时，如果改变其大小，就会抛出并发修改异常，但是如果在遍历时只需要删除 Map 中的元素，那就可以用 Iterator 的 <code>remove()</code> 来删除元素</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span> <span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span> <span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key: "</span> <span class="token operator">+</span> next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" value: "</span> <span class="token operator">+</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210406194724316.png" alt="image-20210406194724316"></p><h2 id="5-通过-Lambda-表达式遍历">5. 通过 Lambda 表达式遍历</h2><blockquote><p>JDK 8 提供了 Lambda 表达式支持，语法看起来更加简洁，并且可以同时拿到 key 和 value，但是遍历 Map 的速度要低于 entrySet 遍历方式</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span> <span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span> <span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key: "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">" value: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210407091358796.png" alt="image-20210407091358796"></p><h1>总结</h1><ol><li>如果只获取 key 或者 value，推荐使用 <code>keySet()</code> 或 <code>values()</code> 方法；</li><li>如果需要同时获取 key 和 value，推荐使用 <code>entrySet</code> ;</li><li>如果需要在遍历过程中删除元素，推荐使用 <code>Iterator</code> ；</li><li>如果需要在遍历过程中添加元素，可以新建一个临时 <code>Map</code> 存放新增的元素，遍历结束后，再把临时 <code>Map</code> 添加到原 <code>Map</code> 中</li></ol>]]></content>
      
      
      <categories>
          
          <category> 小知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一条SQL在MySQL中的旅行</title>
      <link href="2021/03/31/sql-how-to-do/"/>
      <url>2021/03/31/sql-how-to-do/</url>
      
        <content type="html"><![CDATA[<h3 id="一条查询SQL的诞生">一条查询SQL的诞生</h3><p>当简单的输入一条查询SQL时：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> T <span class="token keyword">where</span> ID <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><p>我们只能看到这条SQL给我们返回的结果，却不知道这条语句在MySQL内部是如何执行的。我们先来看一下MySQL的基本架构示意图，了解各个MySQL的模块：</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/0d2070e8f84c4801adbfa03bda1f98d9.png" alt="0d2070e8f84c4801adbfa03bda1f98d9"></p><p>从图上可以了解到MySQL可以大致分为两个部分：<strong>server层</strong> 和 <strong>存储引擎</strong></p><ul><li>server层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖MySQL的大多数核心服务功能，以及所有的内置函数，所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</li><li>存储引擎层负责数据的存储和提取。其架构模式是<a href="https://ruanyifeng.com/blog/2016/09/software-architecture.html">插件式</a>的，支持 InnoDB、MyISAM、Memory等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从MySQL5.5.5 版本开始成为了默认的存储引擎。也就是说，当执行 <code>create table</code> 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。但是也可以通过手动来指定使用的存储引擎的类型，如在 <code>create table</code> 语句中使用 <code>engine = memory</code> ，来指定使用内存引擎创建表。</li></ul><p>另外从图中可以看出不同的存储引擎共用一个 <strong>server 层</strong> ，也就是连接器到执行器的部分。</p><h3 id="组件解释">组件解释</h3><h4 id="连接器">连接器</h4><p>连接器负责跟客户端建立链接、获取权限、维持和管理链接。</p><blockquote><p>链接命令</p></blockquote><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql -h$ip -P$port -u$user -p</code></pre><p>输入完之后回车，会提示输入密码。虽然密码可以跟在 <code>-p</code> 后面，但是这样会暴露密码导致密码泄漏。</p><p>连接命令中的 <code>mysql</code> 是客户端工具，用来跟服务器建立连接。在完成经典的 TCP 握手之后，连接器开始认证你的身份，这个时候用的就是输入的用户名和密码。</p><ul><li>如果用户名或者密码不对，就会收到一个 <code>Access denied for user</code> 的错误，然后客户端程序结束执行。</li><li>如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于<strong>此时读到的权限</strong> 。</li></ul><p><strong>这样就意味着，一个用户成功建立链接之后，即使管理员账户对这个用户的权限做了修改，也不会影响已经存在的链接权限。所以修改完权限之后，只有再建立新的链接才会使用新的权限设置。</strong></p><p>连接完成后，如果没有后续的动作，这个连接处于空闲状态。如下命令可以查看</p><blockquote><p>显示连接状态命令</p></blockquote><pre class="language-mysql" data-language="mysql"><code class="language-mysql">show processlist</code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210330144706018.png" alt="image-20210330144706018"></p><p>客户端如果太长时间没有动静，连接器就睡自动将它断开。这个时间是由参数 <code>wait_timeout</code> 控制的，默认值是 <strong>8 小时</strong> 。</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210330145114782.png" alt="image-20210330145114782"></p><p>如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提示： <code>Lost connection to MySQL server during query</code> 这时候只需要重新连接即可。</p><p>数据库连接分为两种：长连接和短连接</p><ul><li>长连接：如果客户端持续有请求，则一直使用同一个连接；</li><li>短连接：每次执行完很少的几次查询就会断开链接，下次查询需要再重新建立</li></ul><p>建立连接的过程通常是比较复杂的，所以一般建议减少建立连接动作，尽量使用长连接。但是如果全部使用长连接后 MySQL 占用内存涨的非常快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才会释放，如果长连接积累下来就会导致占用内存太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。</p><p><strong>如何解决长连接占用过大的内存？</strong></p><ol><li>定期断开长连接。使用一段时间或者程序里面执行过一个占用内存的大查询后断开链接，之后要查询再重连</li><li>如果使用的版本是 MySQL5.7或者更高的版本，可以在每次执行一个比较大的操作之后，通过执行 <code>mysql_reset_connection</code> 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li></ol><h4 id="查询缓存">查询缓存</h4><p>建立完连接之后就会来到第二步：查询缓存。</p><p>MySQL 拿到一个查询请求之后，会先到查询缓存中看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能是 key-value 对的形式（ <strong>会对 query 语句进行 hash 计算，然后把 hash 值和查询出来的值 存在 query cache 中，后续每次 SQL 语句执行的 query 都会先计算 hash 值去 query cache 中查询。但是如果语句出现变动，即便是查询条件的顺序变换甚至是大小写，也会导致 hash 不一致</strong> ），被直接缓存在内存中。 key 是查询的语句， value 是查询结果。如果查询能够直接在缓存中找到 key，那么这个 value 就会被直接返回给客户端。</p><p>如果语句不在查询缓存中，就会继续执行后面的阶段。执行完成之后，执行结果会被存入查询缓存中。所以查询命中缓存， MySQL 不需要执行后面的复杂操作，可以直接返回结果，这个效率会很高。</p><p><strong>但是大多情况下不建议使用查询缓存，因为弊大于利：</strong></p><p>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询都会被清空。因此很可能费劲的把结果保存起来，还没有使用就被一个更新操作给全部清空了。这对于更新压力比较打的数据库来说，查询缓存的命中率非常低。</p><p>好在 MySQL 提供了一种“按需使用”的方式。可以将参数 <code>query_cache_type</code> 设置成 <code>DEMAND</code> ，这样对于默认的 SQL 语句都不使用查询缓存。而对于那些确定要使用查询缓存的语句，可以使用 <code>SQL_CACHE</code> 显示指定：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select SQL_CACHE * from T where ID &#x3D; 10;</code></pre><p><strong>需要注意的是，MySQL8.0 版本直接将查询缓存的整块功能都给删掉了。</strong></p><h4 id="分析器">分析器</h4><p>如果没有命中查询缓存，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。</p><p>分析器首先会做“<strong>词法分析</strong>”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出来里面的字符串分别是什么、代表什么。MySQL 从你输入的 <code>select</code> 这个关键字识别出来这是一个查询语句，它要把字符串 <code>T</code> 识别成 “表名T” ，把字符串 <code>ID</code> 识别成 “列ID”。</p><p>做完这些识别以后，就要做 “<strong>语法分析</strong>”。根据词法分析的结果，语法分析会根据语法规则，判断输入的这个 SQL 语句是否满足 MySQL 语法。如果语句不对，就会收到 <code>You have an error in your SQL syntax</code> 的错误提醒，比如下面的这个语句：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from T where ID &#x3D; ！@#￥</code></pre><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210330191328535.png" alt="image-20210330191328535"></p><p>一般语法错误会提示在第一个出错误的位置，所以只需要关注的是紧接 <code>use near</code> 的内容。</p><h4 id="优化器">优化器</h4><p>经过了分析器，MySQL 就知道你要做什么了。在开始之前，还要经过优化器的处理。</p><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联的时候，决定各个表的连接顺序。就比如下面这个 SQL 语句：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from t1 join t2 using(ID)  where t1.c&#x3D;10 and t2.d&#x3D;20;</code></pre><p>tips：<code>using(ID)</code> 是 <code>on t1.id = t2.id</code> 的简写因为两张表的关联条件是同一个字段名，可以简写为 <code>using(字段名)</code></p><ul><li>既可以先从 t1 表中取出 <code>c = 10</code> 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 <code>d</code> 的值是否等于 20</li><li>也可以先从表 t2 里面取出 <code>d = 20</code> 的记录的 ID 值，再根据 ID 值关联到 t1,再判断 t1 里面 <code>c</code> 的值是否等于 10</li></ul><p>这两个执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是选择那种方法。</p><h4 id="执行器">执行器</h4><p>MySQL 通过分析器知道了你要做什么，通过优化器知道了改怎么做，于是就进入了执行器阶段。</p><p>开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from T where ID &#x3D; 10;ERROR 1142 (42000): SELECT command denied to user &#39;b&#39;@&#39;localhost&#39; for table &#39;T&#39;</code></pre><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p><p>比如例子中的表 T 中，ID 字段没有索引，那么执行器的流程是这样的：</p><ol><li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这一行存在结果集中；</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到读取到这个表的最后一行；</li><li>执行器将上述遍历的过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ol><p>而如果有索引，执行的逻辑也差不多：第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是在引擎中定义好的。</p><p>tips：<strong>有无索引的区别就是，判断逻辑是在 server 层还是引擎层执行。</strong></p><p>另外，在数据库的慢查询日志中看到一个 <code>rows_examined</code> 的字段，表示这个语句执行过程中调用了多少次存储引擎接口，这个值就是在执行器每次调用引擎获取行的时候累加。</p><h3 id="总结">总结</h3><p>当一条查询语句开始执行的时候，MySQL 内部进行了如下的操作：</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/%E4%B8%80%E6%9D%A1%E6%9F%A5%E8%AF%A2SQL%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="一条查询SQL执行过程"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式初体验</title>
      <link href="2021/03/25/strategy/"/>
      <url>2021/03/25/strategy/</url>
      
        <content type="html"><![CDATA[<h1>什么是策略模式</h1><p>策略模式属于对象的行为模式。其用意是针对一组算法，将每一个算法封装到具有共同接口的独立类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。</p><h1>策略模式的结构</h1><p>策略模式是对算法的包装，是把使用算法的责任和算法本身分割开来，委派给不同的对象管理。策略模式通常把一个系列的算法包装到一系列策略里面，作为一个抽象策略的子类。用一句话来说就是：“准备一组算法，并将每一个算法封装起来，使得它们可以互换”</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/%E4%B8%8B%E8%BD%BD%20(1).png" alt="下载 (1)"></p><p>这个模式涉及到三个角色：</p><ul><li><strong>环境角色：</strong> 持有一个 Strategy 的引用</li><li><strong>抽象策略角色：</strong> 这是一个抽象角色，通常由一个接口或者抽象类实现。此角色给出所有的具体策略类所需要的的接口</li><li><strong>具体策略角色：</strong> 包装了相关的算法或行为</li></ul><h1>使用场景</h1><p>假设现在要设计一个贩卖各类书籍的电子商务网站的购物车系统。一个最简单的情况就是把所有商品的单价乘以数量，但是实际情况肯定比这复杂。例如，网站可能针对所有的高级会员提供每本 20% 的促销折扣；针对中级会员提供每本 10% 的促销折扣；对初级会员没有折扣。</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/22.png" alt="22"></p><h3 id="代码">代码</h3><blockquote><p>抽象折扣类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MemberStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 计算图书价格     * @param bookPrice     * @return     */</span>    <span class="token keyword">double</span> <span class="token function">calcPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> bookPrice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>初级会员折扣类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimaryMemberStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">MemberStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 计算图书价格     *     * @param bookPrice     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> bookPrice<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对初级会员没有折扣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bookPrice<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>中级会员折扣类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntermediateMemberStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">MemberStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 计算图书价格     *     * @param bookPrice     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> bookPrice<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对于中级会员的折扣为 10%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bookPrice <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>高级会员折扣类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdvancedMemberStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">MemberStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 计算图书价格     *     * @param bookPrice     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> bookPrice<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对于高级会员的折扣为 20%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bookPrice <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>价格类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Price</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MemberStrategy</span> memberStrategy<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Price</span><span class="token punctuation">(</span><span class="token class-name">MemberStrategy</span> memberStrategy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memberStrategy <span class="token operator">=</span> memberStrategy<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">quote</span><span class="token punctuation">(</span><span class="token keyword">double</span> booksPrice<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memberStrategy<span class="token punctuation">.</span><span class="token function">calcPrice</span><span class="token punctuation">(</span>booksPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>测试类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test20</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建一个策略对象</span>    <span class="token class-name">MemberStrategy</span> advancedMemberStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvancedMemberStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建一个环境</span>    <span class="token class-name">Price</span> price <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Price</span><span class="token punctuation">(</span>advancedMemberStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算价格</span>    <span class="token keyword">double</span> quote <span class="token operator">=</span> price<span class="token punctuation">.</span><span class="token function">quote</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算后的价格："</span> <span class="token operator">+</span> quote<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>当传入的参数是初级会员时：</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210325113356374.png" alt="image-20210325113356374"></p></li><li><p>当传入的参数是中级会员时：</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210325113450461.png" alt="image-20210325113450461"></p></li><li><p>当传入的参数是高级会员时：</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210325113528428.png" alt="image-20210325113528428"></p></li></ul><h1>认识策略模式</h1><ul><li><p><strong>策略模式的重心</strong></p><p>策略模式的重心不是如何实现算法，而是如何组织、调用这些算法，从而让程序更加灵活，具有更好的维护性和扩展性。</p></li><li><p><strong>算法的平等性</strong></p><p>策略模式一个很大的特点就是各个策略算法的平等性。对于一系列具体的策略算法，大家的地位是完全一样的，正因为这个平等性，才能实现算法之间可以相互替换。所有的策略算法在实现上也是相互独立的，相互之间是没有依赖的。</p></li><li><p><strong>运行时策略的唯一性</strong></p><p>运行期间，策略模式在每一个时刻只能使用一个具体的策略实现对象，虽然可以动态地在不同的策略实现中切换，但是同时只能使用一个</p></li><li><p><strong>公有的行为</strong></p><p>经常见到的是，所有的具体策略类都有一些公有的行为。这时候，就应当把这些公有的行为放到共同的抽象策略角色 Strategy 类里面。当然这时候抽象策略角色必须要有 Java 抽象类实现，而不能使用接口。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/qaz.png" alt="qaz"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 面试</title>
      <link href="2021/03/13/page/"/>
      <url>2021/03/13/page/</url>
      
        <content type="html"><![CDATA[<h1>导读</h1><p>这篇文章用来帮助复习面试知识点,文章的大部分内容均来自<strong>JavaGuide</strong>的<a href="https://github.com/Snailclimb/JavaGuide">面经宝典</a>和<strong>CS指南</strong>(公众号)总结的面经技巧.如果哪里不小心侵犯了您的权益请及时联系我删除.</p><h2 id="八股文骚套路之Java基础">八股文骚套路之Java基础</h2><ol><li><h3 id="Java语言的特点">Java语言的特点</h3><ul><li><p>简单易学</p></li><li><p><strong>面向对象(封装、继承、多态)</strong></p><ul><li><p>封装: 封装是指把一个对象的状态信息(也就是属性)隐藏在对象内部,不允许外部对象直接访问内部对象信息.但是可以提供一些可以被外界访问的方法来操作属性.就好像我们看不到挂在墙上的空调的内部零件(也就是属性),但是可以通过遥控器(方法)来控制空调.如果属性不想被外界访问,我们大可不必提供方法给外界.但是如果一个类没有提供方法给外界,那么这个类就没有什么意义了.就好像我们如果没有空调遥控器,那么我们就无法操作空调制冷,空调本身就没有了意义.</p></li><li><p>继承: 继承是使用已经存在的类的定义作为基础建立新类的技术,新类的定义可以增加新的数据或新的功能,也可以用父类的功能,但是不能选择性的继承父类.通过使用继承可以快速创建新的类,可以提高代码的重用,程序的可维护性,节省大量创建新类时间,提高开发效率.</p></li><li><p>多态: 表示一个对象具有多种状态.具体表现为父类的引用指向子类的实例.</p><p>多态的特点:</p><ol><li>对象类型和引用类型之间具有继承(类)/实现(接口)的关系;</li><li>引用类型变量发出的方法调用到底是哪个类的方法,必须在运行期间才能确定;</li><li>多态不能调用<strong>只在子类存在在父类不存在的方法</strong></li><li>如果子类重写了父类的方法,真正执行的是子类覆盖的方法,如果子类没有覆盖父类的方法,执行的是父类的方法</li></ol></li></ul></li><li><p>平台无关性(Java虚拟机实现平台无关性)</p></li><li><p><strong>支持多线程</strong></p></li><li><p>可靠性</p></li><li><p>安全性</p></li><li><p>支持网络编程</p></li><li><p>编译与解释并存</p></li></ul></li><li><h3 id="比较JVM、JDK和JRE">比较JVM、JDK和JRE</h3><h4 id="JVM">JVM</h4><p>Java虚拟机(JVM)是运行Java字节码的虚拟机.JVM有针对不同系统的特定实现(Windows、Linux、macOS),目的是使用相同的字节码,它们都会给出相同的结果.</p><h4 id="JDK和JRE">JDK和JRE</h4><p>JDK是Java Development Kit缩写,它是功能齐全的Java SDK.它拥有JRE所拥有的的一切,还有编译器(javac)和工具(如javadoc和jdb).它能够创建和编译程序.</p><p>JRE是Java运行时环境.它是运行已经编译的Java程序所需要内容的集合,包括Java虚拟机(JVM),Java类库,java命令和其它的一些基础构件,但是不可以用来创建新的程序.</p></li><li><h3 id="为什么说Java语言-编译与解释并存">为什么说Java语言&quot;编译与解释并存&quot;</h3><p>高级编程语言按照程序的执行方式分为编译型和解释型两种.简单来说,编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码;解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行.例如,你想阅读一本英文名著,你可以找一个英文翻译人员帮助你阅读,有两种方式,你可以先等翻译人员将全本英文名著(也就是源码)都翻译成汉语(平台可以识别的机器码),再去阅读,也可以让翻译人员翻译一段,你在旁边阅读一段,慢慢把书读完.</p><p>Java语言既具有编译型语言的特征,也具有解释型语言的特征,因为Java程序需要先经过编译,后解释两个步骤,由Java编写的程序需要经过编译步骤,生成字节码文件(.class文件),这种字节码文件必须由Java解释器来解释执行.因此,我们可以认为Java语言编译与解释并存.</p></li><li><h3 id="Java的基本类型有几种-各占多少位">Java的基本类型有几种,各占多少位</h3><table><thead><tr><th>基本数据类型</th><th>位数</th><th>字节</th><th>默认值</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>8</td><td>1</td><td>0</td><td>Byte</td></tr><tr><td>short</td><td>16</td><td>2</td><td>0</td><td>Short</td></tr><tr><td>int</td><td>32</td><td>4</td><td>0</td><td>Integer</td></tr><tr><td>long</td><td>64</td><td>8</td><td>0L</td><td>Long</td></tr><tr><td>float</td><td>32</td><td>4</td><td>0.0f</td><td>Float</td></tr><tr><td>double</td><td>64</td><td>8</td><td>0.0d</td><td>Double</td></tr><tr><td>char</td><td>16</td><td>2</td><td>‘u0000’</td><td>Character</td></tr><tr><td>boolean</td><td>1</td><td></td><td>false</td><td>Boolean</td></tr></tbody></table><p>对于<code>boolean</code>,官方文档未明确定义,它依赖于JVM厂商的具体实现.逻辑上理解是占用1位,但是实际中会考虑计算机高效存储因素.</p></li><li><h3 id="Java泛型-类型擦除">Java泛型,类型擦除</h3><p>Java泛型是JDK1.5中引入的一个新特性,泛型提供了编译时类型安全检测机制,该机制允许程序在编译时检测到非法的类型.泛型的本质是参数化类型,也就是说所操作的数据类型被指定为一个参数.</p><p>Java的泛型是伪泛型,这是因为Java在编译期间,所有的泛型信息都会被擦掉,这也就是通常所说的类型擦除.</p><p><strong>小知识点</strong>: 指定泛型就一定不可以添加其他类型的数据了么?</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">List</span><span class="token punctuation">></span></span> listClass <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> method <span class="token operator">=</span> listClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>泛型的三种用法:</p><ol><li><p>泛型类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Description: 泛型类 *              在实例化泛型类时，必须指定T的具体类型 * @Author Shaodi.kou * @Date 2021/7/13 1:02 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> key<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token class-name">T</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>实例化:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>泛型接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Description: 泛型接口 * @Author Shaodi.kou * @Date 2021/7/13 1:02 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>实现类,不指定类型:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Description: 泛型接口实现类,不指定类型 * @Author Shaodi.kou * @Date 2021/7/13 1:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>实现类,指定类型:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Description: 泛型接口实现类,指定类型 * @Author Shaodi.kou * @Date 2021/7/13 1:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>泛型方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">E</span> e <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>使用:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"小张"</span><span class="token punctuation">,</span> <span class="token string">"小陈"</span><span class="token punctuation">,</span> <span class="token string">"小何"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>常用通配符为: T, E, K, V, ?</p><ul><li>T(type)表示具体的一个java类型</li><li>E(element)代表Element</li><li>K V(key value)分别代表java键值对中的key value</li><li>? 表示不确定的java类型</li></ul></li><li><h3 id="和equals-区别"><code>==</code>和<code>equals()</code>区别</h3><p>对于基本数据来说<code>==</code>比较的是值,而对于引用数据类型来说<code>==</code>比较的是对象在内存中的地址值;</p><p><code>equals()</code>不可以作用于基本数据类型,只能判断两个引用数据类型是否相等;</p><p><code>equals()</code>方法存在两种使用情况:</p><ul><li>类没有重写<code>equals()</code>:通过<code>equals()</code>比较的是两个对象的内存地址值,等价于<code>==</code></li><li>类重写了<code>equals()</code>:这个时候比较的则是对象的内容是否相等,如果内容相等就表示对象是一样的</li></ul><p>另外,重写了<code>equals()</code>同时也要重写一下<code>hashCode()</code>:因为如果两个对象相同,那么这两个对象的<code>hash</code>值也一定是相同的,如果两个对象的<code>hash</code>值相同,并不一定这两个对象就相同,可以结合着我写的一篇<a href="https://www.kandx.icu/2021/06/29/Read-HashSet/">HashSet</a>文章看</p></li><li><h3 id="重载和重写的区别">重载和重写的区别</h3><table><thead><tr><th>区别点</th><th>重载方法</th><th>重写方法</th></tr></thead><tbody><tr><td>发生范围</td><td>同一个类</td><td>子类/实现类</td></tr><tr><td>参数列表</td><td>必须修改</td><td>不可以修改</td></tr><tr><td>返回值类型</td><td>可以修改</td><td>类型不可以大于父类/接口</td></tr><tr><td>异常</td><td>可以修改</td><td>异常应该比父类/接口等于或者小于</td></tr><tr><td>访问修饰符</td><td>可以修改</td><td>大于等于父类/接口</td></tr><tr><td>发生阶段</td><td>编译期</td><td>运行期</td></tr></tbody></table></li><li><h3 id="面向对象和面向过程的区别">面向对象和面向过程的区别</h3><ul><li>面向过程: 面向过程的性能比面向对象高,因为类调用的时候需要实例化,开销比较大,比较消耗资源,所以当性能是最重要的考量因素的时候,比如单片机、嵌入式开发等一般采用面向过程开发</li><li>面向对象: 面向对象易维护、易复用、易扩展,因为面向对象有封装、继承、动态的特性,所以可以设计出低耦合的系统,使系统更加灵活、更加易于维护</li></ul></li><li><h3 id="成员变量与局部变量的区别">成员变量与局部变量的区别</h3><ol><li>从语法形式上看,成员变量是属于类的,而局部变量是在代码块或者方法中定义的变量或方法的参数;成员变量可以被<code>public、private、static</code>等权限修饰符修饰,而局部变量则不能被访问控制修饰符以及<code>static</code>修饰;但是,成员变量和局部变量都能被<code>final</code>修饰;</li><li>从变量在内存中的存储方式来看,如果成员变量是用<code>static</code>修饰的,那么这个成员变量是属于类的,如果没有使用<code>static</code>修饰,这个成员变量是属于实例的.而对象存在于堆内存,局部变量存在于栈内存;</li><li>从变量在内存中的生存时间上看,成员变量是对象的一部分,它随着对象的创建而存在,而局部变量随着方法的调用而自动消失;</li><li>从变量是否有默认值来看,成员变量如果没有被初始化赋值,则会自动以类型的默认值作为初始值(如果是被<code>final</code>修饰的成员变量则必须显式的赋值),而局部变量则不会自动赋值;</li></ol></li><li><h3 id="面向对象的三大特性">面向对象的三大特性</h3><p>请看第一点</p></li><li><h3 id="String、StringBuffer和StringBuilder区别">String、StringBuffer和StringBuilder区别</h3><ul><li><p><strong>可变性:</strong></p><p><code>String</code>类中使用<code>final</code>关键字修饰数组来存储字符串,即<code>private final char value[];</code>,所以<code>String</code>是不可变的;</p><p>而<code>StringBuffer</code>和<code>StringBuilder</code>都是<code>AbstractStringBuilder</code>的子类,在<code>AbstractStringBuilder</code>中也是使用数组来保存字符串的,但是没有使用<code>final</code>关键字所以,这两个类是可变的.</p></li><li><p><strong>线程安全性:</strong></p><p><code>String</code>是不可改变的,可以简单理解为常量,所以是线程安全的;</p><p><code>StringBuffer</code>对方法加了同步锁或者对调用的方法加了同步锁,所以线程是安全的;</p><p><code>StringBuilder</code>没有对方法加同步锁,所以线程是非安全的;</p></li><li><p><strong>性能:</strong></p><p>每次对<code>String</code>类进行改变的时候,都会生成一个新的<code>String</code>对象,然后将指针指向新的<code>String</code>对象;</p><p><code>StirngBuffer</code>对象本身进行操作,而不是生成新的对象并改变对象的引用.相同情况下使用<code>StringBuilder</code>相比使用<code>StringBuffer</code>仅能获得10%~15%左右的性能提升,但是却要冒多线程不安全的风险.</p></li><li><p><strong>总结:</strong></p><p>操作少量数据使用<code>String</code>,单线程操作字符串缓冲区下操作大量数据使用<code>StringBuilder</code>,多线程操作字符串缓冲区下操作大量数据使用<code>StringBuffer</code></p></li></ul></li><li><h3 id="序列化和反序列化">序列化和反序列化</h3><p>简单来说:</p><ul><li><strong>序列化:</strong> 将数据结构或对象转换成二进制字节流的过程</li><li><strong>反序列化:</strong> 将序列化过程中所产生的二进制的过程转换成数据结构或对象的过程</li></ul><p>序列化的主要目的是通过网络传输对象或者说将对象存储到文件系统、数据库、内存中.</p><p>对于不想进行序列化的变量可以使用<code>transient</code>关键字修饰,可以阻止实例中那些被此关键字修饰的变量序列化,当对象反序列化的时候,被<code>transient</code>修饰的变量不会被持久化和恢复.<code>transient</code>只能修饰变量,不能修饰类和方法</p></li><li><h3 id="List、Set、Map的区别">List、Set、Map的区别</h3><ul><li>List:存储的元素是有序的(这里的有序是指元素按照数组的索引顺序添加)、可以重复的;</li><li>Set: 存储的元素是无序的(这里的无序是指元素的<code>hash</code>经过算法计算到指定索引的位置,添加顺序并不是按照索引顺序添加的)、不可重复的;</li><li>Map: 按照键值对(key-value)的方式进行存储,<code>key</code>是无序的不可重复的,<code>value</code>是无序的可以重复的;</li></ul></li><li><h3 id="ArrayList和LinkedList的区别">ArrayList和LinkedList的区别</h3><ol><li>是否保证线程安全: <code>ArrayList</code>和<code>LinkedList</code>都是不同步的,也就是线程是不安全的;</li><li>底层数据结构: <code>ArrayList</code>底层是<code>Object[]</code>数组,而<code>LinkedList</code>底层是双向链表;</li><li>插入数据是否受到元素位置影响:<ul><li><code>ArrayList</code>采用数组存储,所以插入和删除元素的时间复杂度受到元素位置影响,比如执行<code>add(E e)</code>方法的时候,<code>ArrayList</code>会默认将添加的元素追加到列表末尾;如果要在指定位置<code>i</code>插入和删除元素的话(<code>add(int index, E element)</code>)时间复杂度就是<code>O(n-i)</code>,因为在进行上述操作的时候集合中第<code>i</code>和第<code>i</code>个元素之后的元素都要执行向后移一位的操作</li><li><code>LinkedList</code>采用链表存储,所以插入头尾数据不受元素位置影响;如果在指定位置<code>i</code>插入和删除元素话,时间复杂度为<code>O(n)</code>,因为需要先移动到指定位置再插入</li></ul></li><li>是否支持快速随机访问: <code>LinkedList</code> 不支持高效的随机元素访问,而<code>ArrayList</code>支持</li><li>内存空间占用: <code>ArrayList</code>的空间浪费主要体现在底层数组总会预留一定的容量空间,而<code>LinkedList</code>的空间花费则体现在它的每一个元素都需要消耗比<code>ArrayList</code>更多的空间,因为要存放元素前一个数据和后一个数据</li></ol><h4 id="ArrayList的扩容机制">ArrayList的扩容机制:</h4><ol><li>需要扩容的条件: <code>minCapacity - elementData.length &gt; 0</code>即最小容量大于数组的长度,调用<code>grow()</code>进行扩容</li><li>先将容量扩大为原来的1.5倍<code>oldCapacity + (oldCapacity &gt;&gt; 1)</code>,跟最小容量进行比较<code>minCapacity</code>,如果还是小直接将最小容量作为新的数组容量</li><li>判断一下新的数组长度是否大于<code>ArrayList</code>设定的最大数组长度<code>MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8</code>,如果大于就将<code>Integer</code>的最大值作为数组新的容量</li><li>最后将之前的数组元素复制到新的数组中</li></ol></li><li><h3 id="HashMap、Hashtable、ConcurrentHashMap">HashMap、Hashtable、ConcurrentHashMap</h3><ul><li><h4 id="HashMap和Hashtable的区别">HashMap和Hashtable的区别</h4><ol><li><strong>线程是否安全:</strong> <code>HashMap</code>是非线程安全的,<code>Hashtable</code>是线程安全的,因为它的内部方法基本都经过<code>synchronized</code>修饰</li><li><strong>效率:</strong> 因为线程安全问题,<code>HashMap</code>要比<code>Hashtable</code>效率高一点.另外,<code>Hashtable</code>基本被淘汰,不要在代码中使用它</li><li><strong>对于<code>null key</code>和<code>null value</code>的支持:</strong> <code>HashMap</code>可以存储<code>null key</code>和<code>null value</code>;<code>Hashtable</code>则不允许有<code>null key</code>和<code>null value</code>,否则会抛出<code>NPE</code>异常</li><li><strong>初始容量大小和每次扩充容量大小的不同:</strong><ul><li>创建时如果不指定容量初始值: <code>Hashtable</code>默认的初始化大小为<code>11</code>,之后每次扩充,容量变为原来的<code>2n + 1</code>;<code>HashMap</code>默认的初始化大小为<code>16</code>,之后每次扩充,容量变为原来的<code>2</code>倍</li><li>创建时如果给定了容量初始值: <code>Hashtable</code>会直接使用给定的大小,而<code>HashMap</code>则会将其扩充为<code>2</code>的幂次方大小</li></ul></li><li><strong>底层数据结构:</strong> JDK1.8以后的<code>HashMap</code>在解决哈希冲突时有了较大的变化,当链表长度大于阕值(默认为8)(将链表转换成红黑树前会判断,如果当前数组的长度小于64,那么会选择先进行数组扩容,而不是转换为红黑树)时,将链表转换为红黑树,以减少搜索时间;<code>Hashtable</code>没有这样的机制</li></ol></li><li><h4 id="ConcurrentHashMap和Hashtable区别">ConcurrentHashMap和Hashtable区别</h4><ol><li><strong>底层数据结构:</strong> JDK1.7的<code>ConcurrentHashMap</code>底层采用<strong>分段数组 + 链表</strong>形式实现,JDK1.8则采用和<code>HashMap</code>一样的数据结构,即<strong>数组 + 链表/红黑树</strong>实现;<code>Hashtable</code>则是<strong>数组 + 链表</strong>的形式实现的.</li><li><strong>实现线程的方式:</strong><ul><li>在JDK1.7的时候,<code>ConcurrentHashMap</code>使用<strong>分段锁</strong>的方式将整个桶数组进行分割分段,每把锁只锁容器中的一部分数据,多线程访问容器里不同数据段的数据,就不会存在锁竞争,提高并发访问效率.到了JDK1.8的时候放弃<code>分段锁</code>改用<strong>数组 + 链表/红黑树</strong>的数据机构实现,并发采用**<code>synchronized</code>和CAS**来操作,这样看起来就像是优化过的并且的线程安全的<code>HashMap</code></li><li><code>Hashtable</code>使用一把锁,即使用<code>synchronized</code>来保证线程安全,效率非常低下,当线程访问同步方法时,其他线程也访问同步方法,可能会进入阻塞或者轮询的状态,如果使用<code>put()</code>添加元素,另一个线程不能使用<code>put()</code>,也不能使用<code>get()</code>.</li></ul></li></ol></li></ul><h4 id="HashMap的长度为什么是2的幂次方">HashMap的长度为什么是<code>2</code>的幂次方</h4><p>为了能让<code>HashMap</code>存取高效,尽量较少碰撞,也就是要尽量把数据分配均匀.哈希值的范围值<code>-2147483648</code>到<code>2147483647</code>,前后大概有40亿的映射空间,只要哈希函数映射的比较均匀松散,一般应用很难出现碰撞,但是40亿长度的数组内存是放不下的,所以需要经过一定的算法对哈希值进行取模运算,得到的余数才能用来要存放的位置也就是数组下标<code>index</code>,这个数组下标的计算方法是<code>(n - 1) &amp; hash</code>(n代表数组长度)</p><p>这个算法怎么设计的?</p><p>我们首先可能会想到采用<code>%</code>取余的操作实现,但是<strong>取余(%)操作中,如果除数是2的幂次方则等价于其除数减一的与(&amp;)操作(也就是说 <code>hash % length == hash &amp; (length - 1)</code>的前提是 <code>length</code>是2的n次方).并且采用二进制位操作&amp;,相对于%能够提高运算效率</strong>,这就解释了<code>HashMap</code>的数组长度为什么是2的幂次方</p><h4 id="为什么将HashMap的头插法改为尾插法">为什么将HashMap的头插法改为尾插法</h4><p>JDK1.7的时候,调用<code>put()</code>添加元素,经过哈希值的与运算后得出的存放位置是<code>i</code>,但是<code>i</code>位置以及有元素了,然后比较两个元素的哈希值如果不同就将这个新添加的元素放到数组中,而之前存在的元素则通过链表连接到新元素的下面;而到了JDK1.8时,则直接将新的元素通过链表方式追加到当前元素的下面,这样做减少了元素的替换,效率提高.</p><h4 id="HashMap怎么扩容的">HashMap怎么扩容的</h4><ul><li>扩容条件: 当<code>HashMap</code>的元素数量达到<strong>数组长度 * 负载因子</strong>时,进行扩容</li><li>如何扩容(不含初始化):<ol><li>判断数组长度是否大于0:<ul><li>如果大于0并且大于等于最大容量(MAXIMUM_CAPACITY = 1 &lt;&lt; 30),那么修改<code>HashMap</code>的阕值为<code>Integer</code>的最大值,扩容完毕</li><li>如果老数组长度的两倍小于最大的数组长度并且老数组大于等于16,那么新的阕值是老阕值的两倍,新的数组长度为老数组的两倍,扩容完毕</li></ul></li></ol></li></ul><h4 id="为什么HashMap的初始化长度为16-负载因子是0-75">为什么HashMap的初始化长度为16,负载因子是0.75</h4><p>我自己不会,看别人的文章也没有理解,这里只放一个比较好的回答链接吧——<a href="https://segmentfault.com/a/1190000023308658#">为什么HashMap的负载因子时0.75</a></p></li><li><h3 id="进程和线程的区别">进程和线程的区别</h3><h4 id="何为进程">何为进程:</h4><p>进程是程序的一次执行过程,是系统运行程序的基本单位,因此进程是动态的.系统运行一个程序即是一个进程从创建、运行到消亡的过程.在Java中,当启动<code>main</code>函数时其实就是启动了一个JVM进程,而<code>main</code>函数所在的线程就是这个进程中的一个线程,也称为主线程</p><h4 id="何为线程">何为线程:</h4><p>线程与进程相似,但线程是一个比进程更小的执行单位.一个进程在其执行的过程中可以产生多个线程.与进程不同的是同类的多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>资源,但是每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>,所以系统在产生一个线程或是在各个线程之间做切换工作时,负担要比进程小的多,也正因为如此,线程也被称为轻量级进程.</p><h4 id="区别">区别:</h4><ol><li><p>生命周期:</p><ul><li><p>线程:线程拥有<strong>5个状态</strong>分别为:新建、就绪、运行、阻塞和死亡.</p><p><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/20210507113513.png" alt="线程的生命周期"></p></li><li><p>进程: 分别有3大模型分别为:<strong>三状态模型</strong>(运行态,就绪态,阻塞态)、<strong>五状态模型</strong>(创建态,就绪态,运行态,阻塞态,终止态)、<strong>七状态模型</strong>(创建态,就绪挂起,就绪态,运行态,阻塞挂起,阻塞态,终止态).</p></li></ul></li><li><p>通信方式:</p><ul><li><p>线程: 一般通过全局变量实现通信,因此在多线程中全局变量最好被关键字<code>volatile</code>修饰;</p></li><li><p>进程: 匿名管道通信、高级管道通信、有名管道通信、消息队列通信、信号量通信、信号、共享内存通信、套接字通信</p><p><a href="https://cloud.tencent.com/developer/article/1690556">进程间的8种通信方式</a></p></li></ul></li></ol></li><li><h3 id="创建线程的方式">创建线程的方式</h3><ol><li><h4 id="继承Thread">继承<code>Thread</code></h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// todo: 需要多线程执行的方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 开启多线程</span><span class="token class-name">ThreadTest</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ThreadTest</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>实现<code>Runnable</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// todo: 需要多线程执行的方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 开启多线程</span><span class="token class-name">ThreadTest</span> threadTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadTest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadTest<span class="token punctuation">)</span><span class="token punctuation">;</span>thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>实现<code>Callable</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// todo: 需要多线程执行的方法</span>        <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过实现Callable接口可以获取线程执行的返回值</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> callable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取线程的返回值</span>    s <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>区别:</strong></p><ul><li>由于Java是单继承的机制,当使用继承<code>Thread</code>类的方式创建多线程,就无法再继承其他类</li><li>实现<code>Runnable</code>接口的方式,可以处理同一资源实现资源共享</li><li>而实现<code>Callable</code>接口搭配<code>FutureTask</code>可以获取线程执行后的返回值</li></ul></li></ol></li><li><h3 id="什么是死锁-死锁如何产生-死锁如何避免">什么是死锁,死锁如何产生,死锁如何避免</h3><h4 id="什么是死锁">什么是死锁:</h4><p>线程死锁指的是多个线程同时被阻塞,它们中的一个或者多个全部都在等待一个资源被释放,由于线程被无限期的阻塞,因此程序不可能正常终止.如图所示,线程A持有资源2,线程B持有资源1,它们同时都想申请对方资源,所以这两个线程就会互相等待而进入死锁状态.</p><p><img src="https://img.kandx.icu/img/20210715223401.png" alt="死锁产生"></p><h4 id="产生死锁的条件">产生死锁的条件:</h4><ol><li><strong>互斥条件</strong>: 该资源任意时刻只有一个线程占用</li><li><strong>请求与保持条件</strong>: 一个线程对请求资源而阻塞时,对已获得的资源保持不放</li><li><strong>不剥夺条件</strong>: 线程已获得的资源在未使用完之前不能被其它线程强行剥夺,只有自己使用完毕之后才能释放资源</li><li><strong>循环等待条件</strong>: 若干线程之间形成一种头尾相接的循环等待资源关系</li></ol><h4 id="如何预防和避免死锁">如何预防和避免死锁</h4><ul><li><p>如何预防:</p><ol><li>破坏请求与保持条件: 一次性申请所有的资源</li><li>破坏不剥夺条件: 占用部分资源的线程进一步申请其他资源时,如果申请不到,可以主动释放它占有的资源</li><li>破坏循环等待条件: 靠按序申请资源来预防,按某一顺序申请资源,释放资源则反序释放</li></ol></li><li><p>如何避免:</p><p>避免死锁就是在资源分配时,借助算法对资源分配进行评估,使其进入安全状态.</p><p>安全状态是指系统按照某种顺序推进(p1,p2,p3…pn)来为每个进程分配所需资源,直到满足每个进程对资源的最大需求,使每个进程都可以顺利完成.称(p1,p2,p3…pn)为安全序列</p></li></ul></li><li><h3 id="synchronized锁升级流程"><code>synchronized</code>锁升级流程</h3><p>暂时没有找到比较好的解释</p><h4 id="synchronized底层原理"><code>synchronized</code>底层原理</h4><ul><li><p>修饰同步代码块</p><p><code>synchronized</code>同步代码块的实现使用的是<code>monitorenter</code>和<code>monitorexit</code>,其中<code>monitorenter</code>指令指向同步代码块的开始位置,<code>monitorexit</code>指令则指明同步代码块的结束位置.当执行<code>monitorenter</code>指令时,线程试图获取锁也就是获取对象监视器<code>monitor</code>的持有权,如果锁的计数器为<code>0</code>表示锁可以被获取,获取后将锁计数器设置为<code>1</code>.在执行<code>monitorexit</code>指令之后,将锁计数器设置为<code>0</code>,表明锁被释放.如果获取对象锁失败,那当前线程就要阻塞等待,直到锁被另外一个线程释放为止</p></li><li><p>修饰方法</p><p><code>synchronized</code>修饰的方法没有<code>monitorenter</code>和<code>monitorexit</code>指令,取而代之的是<code>ACC_SYNCHRONIZED</code>标识,该标识指明了该方法是一个同步方法,JVM通过该<code>ACC_SYNCHRONIZED</code>访问标志来辨别一个方法是否声明为同步方法,从而执行相应的同步调用</p></li></ul></li><li><h3 id="volatile关键字"><code>volatile</code>关键字</h3><ul><li><p>Java内存模型(JMM)</p><p>在JDK1.2之前,Java的内存模型实现总是从<strong>主存</strong>(即共享内存)读取变量,是不需要进行特别注意.而在当前的Java内存模型下,线程可以把变量保存在<strong>本地内存</strong>(比如机器的寄存器)中,而不是直接在主存中进行读写.这就可能造成一个线程在主存中修改了一个变量的值,而另外一个线程还在继续使用它在寄存器中的变量值的拷贝,造成<strong>数据的不一致</strong>.</p><p>要解决这个问题,就需要把变量声明为<code>volatile</code>,这就是指示JVM这个变量是共享且不稳定的,每次使用它都需要从主存中读取.所以,<code>volatile</code>关键字<strong>除了防止JVM指令重排,还有一个特别重要的作用就是保证变量的可见性</strong></p></li><li><p>并发编程的三个重要特性</p><ol><li><strong>原子性</strong>: 一个的操作或者多次操作,要么所有的操作全部都得到执行并且不会收到任何因素的干扰而中断,要么所有的操作都执行,要么都不执行.<code>synchronized</code>可以保证代码片段的原子性.</li><li><strong>可见性</strong>: 当一个变量对共享变量进行了修改,那么另外的线程都是立即可以看到修改后的最新值.<code>volatile</code>关键字可以保证共享变量的可见性.</li><li><strong>有序性</strong>: 代码在执行的过程中的先后顺序,Java在编译器以及运行期间的优化,代码的执行顺序未必就是编写代码时候的顺序.<code>volatile</code>关键字可以禁止指令进行重排</li></ol></li></ul><h4 id="synchronized和volatile关键字的区别"><code>synchronized</code>和<code>volatile</code>关键字的区别</h4><ul><li><code>volatile</code>关键字是线程同步的轻量级实现,所以<code>volatile</code>性能肯定比<code>synchronized</code>关键字要好,但是<code>volatile</code>关键字只能用于变量,而<code>synchronized</code>关键字可以修饰方法以及代码块</li><li><code>volatile</code>关键字能保证数据的可见性,但是不能保证数据的原子性,<code>synchronized</code>关键字两者都可以保证</li><li><code>volatile</code>关键字主要用于解决变量在多个线程之间的可见性,而<code>synchronized</code>关键字解决的是多个线程之间访问资源的同步性.</li></ul></li><li><h3 id="乐观锁和悲观锁的区别">乐观锁和悲观锁的区别</h3><h4 id="关键词解释">关键词解释:</h4><ul><li>乐观锁: 总是假设最好的情况,每次去拿数据的时候都认为别人不会修改,所以不会上锁,但是在更新的时候会判断一下在此期间别人有没有更新这个数据,可以使用<strong>版本号和CAS算法</strong>实现.<strong>乐观锁适用于多读的应用类型,这样可以提高吞吐量</strong>,像数据库提供的类似于<code>write_condition</code>机制,其实都是提供的乐观锁.</li><li>悲观锁: 总是假设最坏的情况,每次去拿数据的时候都认为别人会修改,所以每次在拿数据的时候会加上锁,这样别人想拿这个数据就会阻塞直到它拿到锁(共享资源每次只给一个线程使用,其它线程阻塞,用完后再把资源转让给其它线程).传统的关系型数据库里面就用到了很多这种锁机制,比如行锁,表锁等,读锁,写锁等,都是在操作之前先上锁.</li></ul><h4 id="如何实现">如何实现:</h4><ul><li><p>乐观锁:</p><ol><li><p>版本号控制:</p><p>一般是在数据库表中加上一个数据版本号,如:<code>version</code>字段,来表示数据被修改的次数,当数据被修改时,<code>version</code>值会加1.当线程A要更新数据时,在读取数据的同时也会读取<code>version</code>值,在提交更新时,若刚才读取到的<code>version</code>值大于前数据库中的<code>version</code>值才更新,否则重试更新操作,直到更新成功.</p><p>举个例子: 假设数据库中账户信息表中有一个<code>version</code>字段,当前值为<code>1</code>;而当前账户余额字段<code>balance</code>为<code>100</code>.</p><ul><li>操作员A此时将其读出(version = 1),并从其账户余额中扣除<code>50</code>.</li><li>在操作员A操作过程中,操作员B也读取此用户信息(version = 1),并从其账户中扣除20.</li><li>操作员A完成了修改工作,将数据版本号加一(version = 2),连同账户扣除后的余额(balance = 50),提交到数据库更新,此时由于提交数据版本大于数据库记录当前版本,数据被更新,数据库记录version更新为<code>2</code></li><li>操作员B完成了操作,也将版本号加<code>1</code>(version = 2)试图向数据库提交数据(balance = 80),但此时对比数据库记录版本时发现,操作员B提交的数据版本号为<code>2</code>,数据库当前版本也为<code>2</code>,不满足<strong>提交版本必须大于记录当前版本才能执行更新</strong>的乐观锁策略,因此,操作员B的提交被驳回</li></ul></li><li><p>CAS算法:</p><p>即compare and swap(比较与交换),是一种有名的无锁算法.无锁编程,即不使用锁的情况下实现多线程之间的变量同步,也就是在没有线程被阻塞的情况下实现变量同步,所以也叫非阻塞同步.CAS算法涉及三个参数:</p><ul><li>需要读写的内存值 V</li><li>进行比较的值 A</li><li>拟写入的新值 B</li></ul><p>当且仅当V的值等于A时,CAS通过原子方式用新值B来更新V的值,否则不会执行任何操作.一般情况下是一个自旋操作,即不断重试.</p><p>CAS的缺点:</p><ul><li><p>ABA问题</p><p>如果一个变量V初次读取的时候是A值,并且在准备赋值的时候检查到它仍是A值,那我们可以说它的值没有被其它线程修改过吗?答案是不能,因为在这段时间它的值可能被改为其他值,然后又改为A,那CAS操作就会误认为它从来没有被修改过.这个问题被称为CAS操作的&quot;<strong>ABA问题</strong>&quot;.详细解释请点击<a href="https://www.cnblogs.com/549294286/p/3766717.html">Java CAS和ABA问题</a></p></li><li><p>循环时间长开销大</p><p>自旋CAS(也就是不成功就一直循环执行到成功)如果长时间不成功,会给CPU带来非常大的执行开销</p></li><li><p>只能保证一个共享变量的原子操作</p><p>CAS只对单个共享变量有效,当操作涉及跨多个共享变量时CAS无效.但是JDK1.5开始,提供了<code>AtomicReference</code>类来保证引用对象之间的原子性,可以把多个变量放在一个对象里进行CAS操作.</p></li></ul></li></ol></li><li><p>悲观锁:</p><p>在Java中的实现有<code>synchronized</code>关键字,是一种独占锁,会导致其它需要锁的线程被挂起等待,在常见的关系型数据库中悲观锁的实现有行级锁,表级锁等.</p></li></ul></li><li><h3 id="ThreadLocal"><code>ThreadLocal</code></h3><p>目前能力范围之外看不懂,解释链接<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/multi-thread/%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3ThreadLocal%E5%85%B3%E9%94%AE%E5%AD%97.md"><code>ThreadLocal</code>关键字</a></p></li><li><h3 id="线程池">线程池</h3><h4 id="使用线程池的好处">使用线程池的好处:</h4><ul><li><strong>降低资源消耗</strong>. 通过重复利用已经创建的线程降低线程创建和销毁造成的消耗.</li><li><strong>提高响应速度</strong>. 当任务到达时,任务可以不需要等到线程创建就能立即执行</li><li><strong>提高线程的可管理性</strong>. 线程是稀缺资源,如果无限制的创建,不仅会消耗系统资源,还会降低系统的稳定性,使用线程池可以进行统一分配,调优和监控.</li></ul><h4 id="如何创建线程池">如何创建线程池:</h4><p><strong>严禁使用<code>Executors</code>创建线程</strong>,原因如下:</p><ul><li><code>FixedThreadPool</code>和<code>SingleThreadExecutor</code>允许请求的队列长度为<code>Integer.MAX_VALUE</code>,可能堆积大量的请求,从而导致OOM.</li><li><code>CachedThreadPool</code>和<code>ScheduledThreadPool</code>允许创建的线程数量为<code>Integer.MAX_VALUE</code>,可能会创建大量线程,从而导致OOM.</li></ul><p>通过<code>ThreadPoolExecutor</code>类的构造方法创建线程</p><p><img src="https://img.kandx.icu/img/20210719164716.png" alt="构造方法"></p><h4 id="线程池的重要参数">线程池的重要参数</h4><ul><li><code>corePoolSize</code>: 核心线程数,定义了最小可以同时运行的线程数量</li><li><code>maximumPoolSize</code>: 当队列中存放的任务达到队列容量的时候,当前可以同时运行的线程数量变为最大线程数</li><li><code>workQueue</code>: 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数,如果达到的话,新任务就会被存放到队列中</li><li><code>keepAliveTime</code>: 当线程池中的线程数量大于<code>corePoolSize</code>的时候,如果这时没有新的任务提交,核心线程外的线程不会立即销毁,而是会等待,知道等待的时间超过了<code>keepAliveTime</code>才会被回收销毁;</li><li><code>unit</code>: <code>keepAliveTime</code>参数的时间单位.</li><li><code>threadFactory</code>: <code>executor</code>创建新线程的时候会用到</li><li><code>handler</code>: 饱和策略,如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时,<code>ThreadPoolExecutor</code>定义了一些策略:<ul><li><code>ThreadPoolExecutor.AbortPolicy</code>: 抛出<code>RejectedExecutionException</code>来拒绝新任务的处理(默认的策略模式);</li><li><code>ThreadPoolExecutor.CallerRunsPolicy</code>: 调用执行自己的线程运行任务,也就是自己直接去执行被拒绝的任务,如果执行程序已关闭,则会丢弃该任务.因此这种策略会降低对新任务提交速度,影响程序的整体性能.</li><li><code>ThreadPoolExecutor.DiscardPolicy</code>: 不处理新任务直接丢掉</li><li><code>ThreadPoolExecutor.DiscardOldestPolicy</code>: 此策略将丢掉最早的未处理的任务请求</li></ul></li></ul><h4 id="线程池原理">线程池原理</h4><p><img src="https://camo.githubusercontent.com/e3c8d64487baa01192ccb6d1023c9d2b231c20c5067dbb8d53511889325c44d7/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d372f2545352539422542452545382541372541332545372542412542462545372541382538422545362542312541302545352541452539452545372538452542302545352538452539462545372539302538362e706e67" alt="线程池执行原理"></p></li><li><h3 id="ReentrantLock和AQS"><code>ReentrantLock</code>和<code>AQS</code></h3><p>ReentrantLock: 暂时没有找到合适的</p><p>AQS: <a href="https://www.cnblogs.com/waterystone/p/4920797.html">Java并发之AQS详解</a></p></li></ol><a class="btn-beautify button--animated green larger" href="https://www.kandx.icu/2021/07/20/java-mysql"   title="八股文骚套路之Java基础"><i class="far fa-hand-point-right"></i><span>八股文骚套路之Java基础</span></a>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-plus代码生成</title>
      <link href="2021/03/08/mybatis-plus-generator/"/>
      <url>2021/03/08/mybatis-plus-generator/</url>
      
        <content type="html"><![CDATA[<h1>jar包依赖</h1><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 自动生成实体 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1>主要的生成文件</h1><pre class="language-Java" data-language="Java"><code class="language-Java">package com.test.mybatisplusdemo.generator;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.InjectionConfig;import com.baomidou.mybatisplus.generator.config.*;import com.baomidou.mybatisplus.generator.config.po.TableInfo;import com.baomidou.mybatisplus.generator.config.rules.DateType;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import java.util.Collections;&#x2F;** * @Description: TODO(这里用一句话描述这个类的作用) * @Author Shaodi.kou * @Date 2021&#x2F;2&#x2F;19 10:19 *&#x2F;public class MyGenerator &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F; 代码生成器        AutoGenerator mpg &#x3D; new AutoGenerator();        &#x2F;&#x2F; 全局配置        GlobalConfig globalConfig &#x3D; new GlobalConfig();        globalConfig.setOutputDir(&quot;D:&#x2F;&#x2F;生成代码&#x2F;&#x2F;&quot;);&#x2F;&#x2F;输出目录        globalConfig.setFileOverride(true);&#x2F;&#x2F; 是否覆盖文件        globalConfig.setActiveRecord(true);&#x2F;&#x2F; 开启 activeRecord 模式        globalConfig.setEnableCache(false);&#x2F;&#x2F; XML 二级缓存        globalConfig.setBaseResultMap(true);&#x2F;&#x2F; XML ResultMap        globalConfig.setBaseColumnList(true);&#x2F;&#x2F; XML columnList        &#x2F;&#x2F;globalConfig.setSwagger2(true);&#x2F;&#x2F; 生成Swagger注解        globalConfig.setAuthor(&quot;Shaodi.kou&quot;);        globalConfig.setDateType(DateType.SQL_PACK);        &#x2F;&#x2F; 自定义文件命名，注意 %s 会自动填充表实体属性！        globalConfig.setMapperName(&quot;%sDao&quot;);        globalConfig.setXmlName(&quot;%sDao&quot;);        globalConfig.setServiceName(&quot;%sService&quot;);        globalConfig.setServiceImplName(&quot;%sServiceImpl&quot;);        globalConfig.setControllerName(&quot;%sController&quot;);        mpg.setGlobalConfig(globalConfig);        DataSourceConfig sourceConfig &#x3D; new DataSourceConfig();        sourceConfig.setDbType(DbType.MYSQL);&#x2F;&#x2F; 数据库类型        sourceConfig.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;);        sourceConfig.setUsername(&quot;root&quot;);        sourceConfig.setPassword(&quot;123456&quot;);        sourceConfig.setUrl(&quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;school?useUnicode&#x3D;true&amp;serverTimezone&#x3D;GMT&amp;useSSL&#x3D;false&amp;characterEncoding&#x3D;utf8&quot;);        mpg.setDataSource(sourceConfig);        &#x2F;&#x2F; 策略配置        StrategyConfig strategyConfig &#x3D; new StrategyConfig();        &#x2F;&#x2F; .setCapitalMode(true)&#x2F;&#x2F; 全局大写命名        strategyConfig.setTablePrefix(new String[]&#123;&quot;tab_&quot;&#125;);&#x2F;&#x2F; 此处可以修改为您的表前缀        strategyConfig.setNaming(NamingStrategy.underline_to_camel);&#x2F;&#x2F; 表名生成策略        strategyConfig.setEntityTableFieldAnnotationEnable(true);&#x2F;&#x2F; 强制生成@TableId等注解        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);        strategyConfig.setRestControllerStyle(true);        mpg.setStrategy(strategyConfig);        &#x2F;&#x2F; 包配置        PackageConfig packageConfig &#x3D; new PackageConfig();        packageConfig.setParent(&quot;com.test.mybatisplusdemo&quot;);&#x2F;&#x2F; 自定义包路径        packageConfig.setController(&quot;controller&quot;);&#x2F;&#x2F; 这里是控制器包名，默认 web        packageConfig.setMapper(&quot;dao&quot;);        packageConfig.setEntity(&quot;entity&quot;);        packageConfig.setService(&quot;service&quot;);        packageConfig.setServiceImpl(&quot;service.impl&quot;);        mpg.setPackageInfo(packageConfig);        &#x2F;&#x2F; 注入配置        InjectionConfig injectionConfig &#x3D; new InjectionConfig() &#123;            @Override            public void initMap() &#123;            &#125;        &#125;;        injectionConfig.setFileOutConfigList(Collections.&lt;FileOutConfig&gt;singletonList(new FileOutConfig(&quot;&#x2F;templates&#x2F;mapper.xml.vm&quot;) &#123;            &#x2F;&#x2F; 自定义输出文件目录            @Override            public String outputFile(TableInfo tableInfo) &#123;                return globalConfig.getOutputDir() + tableInfo.getEntityName() + &quot;Dao.xml&quot;;            &#125;        &#125;));        mpg.setCfg(injectionConfig);        &#x2F;&#x2F; 执行生成*&#x2F;        mpg.execute();    &#125;&#125;</code></pre><p>生成结果:<br><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210308212453785.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis-plus </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>螺丝钉</title>
      <link href="2021/03/07/screw/"/>
      <url>2021/03/07/screw/</url>
      
        <content type="html"><![CDATA[<h1>简介</h1><p>在企业级开发中，经常需要编写数据表结构文档。但是文档编写十分繁琐不方便维护，如果有一次忘记维护就会给以后的开发带来很多困扰。所以<strong>screw</strong>的作者为了解决这个问题就开发并且开源了这个项目。<a href="https://github.com/pingfangushi/screw">项目地址</a>希望大家可以去点赞支持一下作者。</p><h1>使用</h1><p>项目的效果，优点，以及支持的数据我这里就不展示了，项目主页说的很清楚了大家可以去看看。</p><h2 id="普通方式">普通方式</h2><ul><li>引入依赖</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.smallbun.screw<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>screw-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;lastVersion&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>编写代码</li></ul><pre class="language-Java" data-language="Java"><code class="language-Java">&#x2F;** * 文档生成 *&#x2F;void documentGeneration() &#123;   &#x2F;&#x2F;数据源   HikariConfig hikariConfig &#x3D; new HikariConfig();   hikariConfig.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);   hikariConfig.setJdbcUrl(&quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;database&quot;);   hikariConfig.setUsername(&quot;root&quot;);   hikariConfig.setPassword(&quot;password&quot;);   &#x2F;&#x2F;设置可以获取tables remarks信息   hikariConfig.addDataSourceProperty(&quot;useInformationSchema&quot;, &quot;true&quot;);   hikariConfig.setMinimumIdle(2);   hikariConfig.setMaximumPoolSize(5);   DataSource dataSource &#x3D; new HikariDataSource(hikariConfig);   &#x2F;&#x2F;生成配置   EngineConfig engineConfig &#x3D; EngineConfig.builder()         &#x2F;&#x2F;生成文件路径         .fileOutputDir(fileOutputDir)         &#x2F;&#x2F;打开目录         .openOutputDir(true)         &#x2F;&#x2F;文件类型         .fileType(EngineFileType.HTML)         &#x2F;&#x2F;生成模板实现         .produceType(EngineTemplateType.freemarker)         &#x2F;&#x2F;自定义文件名称         .fileName(&quot;自定义文件名称&quot;).build();   &#x2F;&#x2F;忽略表   ArrayList&lt;String&gt; ignoreTableName &#x3D; new ArrayList&lt;&gt;();   ignoreTableName.add(&quot;test_user&quot;);   ignoreTableName.add(&quot;test_group&quot;);   &#x2F;&#x2F;忽略表前缀   ArrayList&lt;String&gt; ignorePrefix &#x3D; new ArrayList&lt;&gt;();   ignorePrefix.add(&quot;test_&quot;);   &#x2F;&#x2F;忽略表后缀       ArrayList&lt;String&gt; ignoreSuffix &#x3D; new ArrayList&lt;&gt;();   ignoreSuffix.add(&quot;_test&quot;);   ProcessConfig processConfig &#x3D; ProcessConfig.builder()         &#x2F;&#x2F;指定生成逻辑、当存在指定表、指定表前缀、指定表后缀时，将生成指定表，其余表不生成、并跳过忽略表配置 &#x2F;&#x2F;根据名称指定表生成 .designatedTableName(new ArrayList&lt;&gt;()) &#x2F;&#x2F;根据表前缀生成 .designatedTablePrefix(new ArrayList&lt;&gt;()) &#x2F;&#x2F;根据表后缀生成 .designatedTableSuffix(new ArrayList&lt;&gt;())         &#x2F;&#x2F;忽略表名         .ignoreTableName(ignoreTableName)         &#x2F;&#x2F;忽略表前缀         .ignoreTablePrefix(ignorePrefix)         &#x2F;&#x2F;忽略表后缀         .ignoreTableSuffix(ignoreSuffix).build();   &#x2F;&#x2F;配置   Configuration config &#x3D; Configuration.builder()         &#x2F;&#x2F;版本         .version(&quot;1.0.0&quot;)         &#x2F;&#x2F;描述         .description(&quot;数据库设计文档生成&quot;)         &#x2F;&#x2F;数据源         .dataSource(dataSource)         &#x2F;&#x2F;生成配置         .engineConfig(engineConfig)         &#x2F;&#x2F;生成配置         .produceConfig(processConfig)         .build();   &#x2F;&#x2F;执行生成   new DocumentationExecute(config).execute();&#125;</code></pre><h2 id="Maven插件">Maven插件</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.smallbun.screw<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>screw-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;lastVersion&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- HikariCP --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zaxxer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>HikariCP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--mysql driver--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--username--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--password--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--driver--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driverClassName</span><span class="token punctuation">></span></span>com.mysql.cj.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driverClassName</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--jdbc url--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcUrl</span><span class="token punctuation">></span></span>jdbc:mysql://127.0.0.1:3306/xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcUrl</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--生成文件类型--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileType</span><span class="token punctuation">></span></span>HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileType</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--打开文件输出目录--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>openOutputDir</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>openOutputDir</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--生成模板--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>produceType</span><span class="token punctuation">></span></span>freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>produceType</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--文档名称 为空时:将采用[数据库名称-描述-版本号]作为文档名称--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileName</span><span class="token punctuation">></span></span>测试文档名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileName</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--描述--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>数据库文档生成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--版本--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;project.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--标题--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>数据库文档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>run<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h1>生成效果</h1><ul><li>html格式<br><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210313151840868.png" alt="image-20210313151840868"></li><li>Markdown格式<br><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210313151938771.png" alt="image-20210313151938771"></li><li>word格式<br><img src="https://cdn.jsdelivr.net/gh/daochen23/blog_images@master/img/image-20210313151708009.png" alt="image-20210313151708009"></li></ul><h1>需要注意的几点</h1><ul><li>如果是Mysql数据库MySQL的驱动必须是6以上因为screw不支持<code>com.mysql.jdbc.driver</code> 。如果使用了5版本的驱动就会出现下面的错误：<br><img src="https://blog.kandx.icu/main/388cfeb2cc59209a770fc275336fb760.png" alt="image.png"></li><li>生成的文档乱码：MySQL的URL中加入<code>?characterEncoding=UTF-8</code></li><li>出现<code>Caused by: java.lang.NoSuchFieldError: VERSION_2_3_30</code>：检查项目<code>freemarker</code>依赖，这是由于版本过低造成的，升级版本为2.3.30即可。</li><li>MySQL数据库表和列字段有说明，生成的文档没有说明：URL链接加入<code>useInformationSchema=true</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 生成文档 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
